// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module infer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_q0,
        res_address1,
        res_ce1,
        res_we1,
        res_d1,
        res_q1
);

parameter    ap_ST_fsm_state1 = 49'd1;
parameter    ap_ST_fsm_state2 = 49'd2;
parameter    ap_ST_fsm_state3 = 49'd4;
parameter    ap_ST_fsm_state4 = 49'd8;
parameter    ap_ST_fsm_state5 = 49'd16;
parameter    ap_ST_fsm_state6 = 49'd32;
parameter    ap_ST_fsm_state7 = 49'd64;
parameter    ap_ST_fsm_state8 = 49'd128;
parameter    ap_ST_fsm_state9 = 49'd256;
parameter    ap_ST_fsm_state10 = 49'd512;
parameter    ap_ST_fsm_state11 = 49'd1024;
parameter    ap_ST_fsm_state12 = 49'd2048;
parameter    ap_ST_fsm_state13 = 49'd4096;
parameter    ap_ST_fsm_state14 = 49'd8192;
parameter    ap_ST_fsm_state15 = 49'd16384;
parameter    ap_ST_fsm_state16 = 49'd32768;
parameter    ap_ST_fsm_state17 = 49'd65536;
parameter    ap_ST_fsm_state18 = 49'd131072;
parameter    ap_ST_fsm_state19 = 49'd262144;
parameter    ap_ST_fsm_state20 = 49'd524288;
parameter    ap_ST_fsm_state21 = 49'd1048576;
parameter    ap_ST_fsm_state22 = 49'd2097152;
parameter    ap_ST_fsm_state23 = 49'd4194304;
parameter    ap_ST_fsm_state24 = 49'd8388608;
parameter    ap_ST_fsm_state25 = 49'd16777216;
parameter    ap_ST_fsm_state26 = 49'd33554432;
parameter    ap_ST_fsm_state27 = 49'd67108864;
parameter    ap_ST_fsm_state28 = 49'd134217728;
parameter    ap_ST_fsm_state29 = 49'd268435456;
parameter    ap_ST_fsm_state30 = 49'd536870912;
parameter    ap_ST_fsm_state31 = 49'd1073741824;
parameter    ap_ST_fsm_state32 = 49'd2147483648;
parameter    ap_ST_fsm_state33 = 49'd4294967296;
parameter    ap_ST_fsm_state34 = 49'd8589934592;
parameter    ap_ST_fsm_state35 = 49'd17179869184;
parameter    ap_ST_fsm_state36 = 49'd34359738368;
parameter    ap_ST_fsm_state37 = 49'd68719476736;
parameter    ap_ST_fsm_state38 = 49'd137438953472;
parameter    ap_ST_fsm_state39 = 49'd274877906944;
parameter    ap_ST_fsm_state40 = 49'd549755813888;
parameter    ap_ST_fsm_state41 = 49'd1099511627776;
parameter    ap_ST_fsm_state42 = 49'd2199023255552;
parameter    ap_ST_fsm_state43 = 49'd4398046511104;
parameter    ap_ST_fsm_state44 = 49'd8796093022208;
parameter    ap_ST_fsm_state45 = 49'd17592186044416;
parameter    ap_ST_fsm_state46 = 49'd35184372088832;
parameter    ap_ST_fsm_pp0_stage0 = 49'd70368744177664;
parameter    ap_ST_fsm_pp0_stage1 = 49'd140737488355328;
parameter    ap_ST_fsm_state57 = 49'd281474976710656;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [2:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;
input  [31:0] res_q0;
output  [2:0] res_address1;
output   res_ce1;
output   res_we1;
output  [31:0] res_d1;
input  [31:0] res_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[2:0] res_address0;
reg res_ce0;
reg res_we0;
reg[31:0] res_d0;
reg[2:0] res_address1;
reg res_ce1;
reg res_we1;

(* fsm_encoding = "none" *) reg   [48:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Weight0_f_ce0;
wire   [31:0] Weight0_f_q0;
reg    Weight0_f_ce1;
wire   [31:0] Weight0_f_q1;
reg    Bias0_f_ce0;
wire   [31:0] Bias0_f_q0;
reg    Bias0_f_ce1;
wire   [31:0] Bias0_f_q1;
reg    Weight0_i_ce0;
wire   [31:0] Weight0_i_q0;
reg    Weight0_i_ce1;
wire   [31:0] Weight0_i_q1;
reg    Bias0_i_ce0;
wire   [31:0] Bias0_i_q0;
reg    Bias0_i_ce1;
wire   [31:0] Bias0_i_q1;
reg    Weight0_c_ce0;
wire   [31:0] Weight0_c_q0;
reg    Weight0_c_ce1;
wire   [31:0] Weight0_c_q1;
reg    Bias0_c_ce0;
wire   [31:0] Bias0_c_q0;
reg    Bias0_c_ce1;
wire   [31:0] Bias0_c_q1;
reg    Weight0_o_ce0;
wire   [31:0] Weight0_o_q0;
reg    Weight0_o_ce1;
wire   [31:0] Weight0_o_q1;
reg    Bias0_o_ce0;
wire   [31:0] Bias0_o_q0;
reg    Bias0_o_ce1;
wire   [31:0] Bias0_o_q1;
reg   [2:0] Bias_lc_address0;
reg    Bias_lc_ce0;
wire   [31:0] Bias_lc_q0;
reg   [2:0] i_0_0_i_reg_538;
wire   [5:0] add_ln136_fu_729_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln137_fu_746_p2;
wire    ap_CS_fsm_state3;
wire   [5:0] add_ln138_fu_763_p2;
wire    ap_CS_fsm_state4;
wire   [5:0] add_ln139_fu_780_p2;
wire    ap_CS_fsm_state5;
wire   [5:0] add_ln140_fu_797_p2;
wire    ap_CS_fsm_state6;
wire   [5:0] add_ln141_fu_814_p2;
wire    ap_CS_fsm_state7;
wire   [4:0] i_fu_837_p2;
reg   [4:0] i_reg_1022;
wire    ap_CS_fsm_state8;
wire   [10:0] sub_ln174_fu_867_p2;
reg   [10:0] sub_ln174_reg_1027;
wire   [0:0] icmp_ln147_fu_831_p2;
wire   [4:0] j_fu_883_p2;
reg   [4:0] j_reg_1035;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln174_fu_877_p2;
wire   [6:0] j_1_fu_914_p2;
reg   [6:0] j_1_reg_1048;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln175_fu_908_p2;
wire   [0:0] icmp_ln105_fu_936_p2;
reg   [0:0] icmp_ln105_reg_1058;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state47_pp0_stage0_iter0;
wire    ap_block_state49_pp0_stage0_iter1;
wire    ap_block_state51_pp0_stage0_iter2;
wire    ap_block_state53_pp0_stage0_iter3;
wire    ap_block_state55_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln105_reg_1058_pp0_iter1_reg;
reg   [0:0] icmp_ln105_reg_1058_pp0_iter2_reg;
reg   [0:0] icmp_ln105_reg_1058_pp0_iter3_reg;
reg   [0:0] icmp_ln105_reg_1058_pp0_iter4_reg;
reg   [2:0] res_addr_reg_1067;
reg   [2:0] res_addr_reg_1067_pp0_iter1_reg;
reg   [2:0] res_addr_reg_1067_pp0_iter2_reg;
reg   [2:0] res_addr_reg_1067_pp0_iter3_reg;
wire   [0:0] icmp_ln105_1_fu_954_p2;
reg   [0:0] icmp_ln105_1_reg_1072;
reg   [0:0] icmp_ln105_1_reg_1072_pp0_iter1_reg;
reg   [0:0] icmp_ln105_1_reg_1072_pp0_iter2_reg;
reg   [0:0] icmp_ln105_1_reg_1072_pp0_iter3_reg;
reg   [0:0] icmp_ln105_1_reg_1072_pp0_iter4_reg;
wire   [63:0] zext_ln109_1_fu_960_p1;
reg   [63:0] zext_ln109_1_reg_1076;
reg   [2:0] res_addr_2_reg_1081;
reg   [2:0] res_addr_2_reg_1081_pp0_iter1_reg;
reg   [2:0] res_addr_2_reg_1081_pp0_iter2_reg;
reg   [2:0] res_addr_2_reg_1081_pp0_iter3_reg;
reg   [2:0] res_addr_2_reg_1081_pp0_iter4_reg;
reg   [31:0] Bias_lc_load_reg_1086;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state48_pp0_stage1_iter0;
wire    ap_block_state50_pp0_stage1_iter1;
wire    ap_block_state52_pp0_stage1_iter2;
wire    ap_block_state54_pp0_stage1_iter3;
wire    ap_block_state56_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] res_load_reg_1091;
reg   [31:0] res_load_1_reg_1101;
wire   [2:0] add_ln105_fu_965_p2;
reg   [2:0] add_ln105_reg_1106;
reg   [31:0] Bias_lc_load_1_reg_1111;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] grp_fu_725_p2;
reg   [31:0] tmp9_i_reg_1116;
reg    ap_enable_reg_pp0_iter3;
reg   [31:0] tmp_1_i_reg_1121;
wire    ap_CS_fsm_state46;
wire    grp_gemvm1_fu_573_ap_ready;
wire    grp_gemvm1_fu_573_ap_done;
wire    ap_block_pp0_stage1_subdone;
reg    ap_predicate_tran54to57_state48;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter3_state54;
reg    ap_enable_reg_pp0_iter4;
reg   [5:0] gate_f_address0;
reg    gate_f_ce0;
reg    gate_f_we0;
reg   [31:0] gate_f_d0;
wire   [31:0] gate_f_q0;
reg    gate_f_ce1;
wire   [31:0] gate_f_q1;
reg   [5:0] gate_i_address0;
reg    gate_i_ce0;
reg    gate_i_we0;
reg   [31:0] gate_i_d0;
wire   [31:0] gate_i_q0;
reg    gate_i_ce1;
wire   [31:0] gate_i_q1;
reg   [5:0] stat_C_address0;
reg    stat_C_ce0;
reg    stat_C_we0;
reg   [31:0] stat_C_d0;
wire   [31:0] stat_C_q0;
reg   [5:0] stat_C_address1;
reg    stat_C_ce1;
reg    stat_C_we1;
wire   [31:0] stat_C_q1;
reg   [5:0] C_t_address0;
reg    C_t_ce0;
reg    C_t_we0;
reg   [31:0] C_t_d0;
wire   [31:0] C_t_q0;
reg   [5:0] C_t_address1;
reg    C_t_ce1;
reg    C_t_we1;
reg   [31:0] C_t_d1;
wire   [31:0] C_t_q1;
reg   [5:0] gate_o_address0;
reg    gate_o_ce0;
reg    gate_o_we0;
reg   [31:0] gate_o_d0;
wire   [31:0] gate_o_q0;
reg    gate_o_ce1;
wire   [31:0] gate_o_q1;
reg   [5:0] h_t_address0;
reg    h_t_ce0;
reg    h_t_we0;
reg   [31:0] h_t_d0;
wire   [31:0] h_t_q0;
reg   [5:0] h_t_address1;
reg    h_t_ce1;
reg    h_t_we1;
wire   [31:0] h_t_q1;
reg   [6:0] vec_i_address0;
reg    vec_i_ce0;
reg    vec_i_we0;
reg   [31:0] vec_i_d0;
wire   [31:0] vec_i_q0;
reg    vec_i_ce1;
wire   [31:0] vec_i_q1;
reg   [5:0] vec_tmp_address0;
reg    vec_tmp_ce0;
reg    vec_tmp_we0;
reg   [31:0] vec_tmp_d0;
wire   [31:0] vec_tmp_q0;
reg   [5:0] vec_tmp_address1;
reg    vec_tmp_ce1;
reg    vec_tmp_we1;
reg   [31:0] vec_tmp_d1;
wire   [31:0] vec_tmp_q1;
wire    grp_tanh_fu_550_ap_start;
wire    grp_tanh_fu_550_ap_done;
wire    grp_tanh_fu_550_ap_idle;
wire    grp_tanh_fu_550_ap_ready;
wire   [5:0] grp_tanh_fu_550_res_address0;
wire    grp_tanh_fu_550_res_ce0;
wire    grp_tanh_fu_550_res_we0;
wire   [31:0] grp_tanh_fu_550_res_d0;
wire   [5:0] grp_tanh_fu_550_res_address1;
wire    grp_tanh_fu_550_res_ce1;
wire    grp_tanh_fu_550_res_we1;
wire   [31:0] grp_tanh_fu_550_res_d1;
wire   [5:0] grp_tanh_fu_550_a_address0;
wire    grp_tanh_fu_550_a_ce0;
reg   [31:0] grp_tanh_fu_550_a_q0;
wire   [5:0] grp_tanh_fu_550_a_address1;
wire    grp_tanh_fu_550_a_ce1;
reg   [31:0] grp_tanh_fu_550_a_q1;
wire    grp_sigmoid_fu_556_ap_start;
wire    grp_sigmoid_fu_556_ap_done;
wire    grp_sigmoid_fu_556_ap_idle;
wire    grp_sigmoid_fu_556_ap_ready;
wire   [5:0] grp_sigmoid_fu_556_res_address0;
wire    grp_sigmoid_fu_556_res_ce0;
wire    grp_sigmoid_fu_556_res_we0;
wire   [31:0] grp_sigmoid_fu_556_res_d0;
wire   [5:0] grp_sigmoid_fu_556_a_address0;
wire    grp_sigmoid_fu_556_a_ce0;
wire    grp_gemvm_fu_562_ap_start;
wire    grp_gemvm_fu_562_ap_done;
wire    grp_gemvm_fu_562_ap_idle;
wire    grp_gemvm_fu_562_ap_ready;
wire   [5:0] grp_gemvm_fu_562_res_address0;
wire    grp_gemvm_fu_562_res_ce0;
wire    grp_gemvm_fu_562_res_we0;
wire   [31:0] grp_gemvm_fu_562_res_d0;
wire   [12:0] grp_gemvm_fu_562_a_address0;
wire    grp_gemvm_fu_562_a_ce0;
reg   [31:0] grp_gemvm_fu_562_a_q0;
wire   [12:0] grp_gemvm_fu_562_a_address1;
wire    grp_gemvm_fu_562_a_ce1;
reg   [31:0] grp_gemvm_fu_562_a_q1;
wire   [6:0] grp_gemvm_fu_562_b_address0;
wire    grp_gemvm_fu_562_b_ce0;
wire   [6:0] grp_gemvm_fu_562_b_address1;
wire    grp_gemvm_fu_562_b_ce1;
wire    grp_gemvm1_fu_573_ap_start;
wire    grp_gemvm1_fu_573_ap_idle;
wire   [2:0] grp_gemvm1_fu_573_res_address0;
wire    grp_gemvm1_fu_573_res_ce0;
wire    grp_gemvm1_fu_573_res_we0;
wire   [31:0] grp_gemvm1_fu_573_res_d0;
wire   [5:0] grp_gemvm1_fu_573_b_address0;
wire    grp_gemvm1_fu_573_b_ce0;
wire   [5:0] grp_gemvm1_fu_573_b_address1;
wire    grp_gemvm1_fu_573_b_ce1;
wire    grp_hprod_fu_708_ap_start;
wire    grp_hprod_fu_708_ap_done;
wire    grp_hprod_fu_708_ap_idle;
wire    grp_hprod_fu_708_ap_ready;
wire   [5:0] grp_hprod_fu_708_res_address0;
wire    grp_hprod_fu_708_res_ce0;
wire    grp_hprod_fu_708_res_we0;
wire   [31:0] grp_hprod_fu_708_res_d0;
wire   [5:0] grp_hprod_fu_708_res_address1;
wire    grp_hprod_fu_708_res_ce1;
wire    grp_hprod_fu_708_res_we1;
wire   [31:0] grp_hprod_fu_708_res_d1;
wire   [5:0] grp_hprod_fu_708_a_address0;
wire    grp_hprod_fu_708_a_ce0;
reg   [31:0] grp_hprod_fu_708_a_q0;
wire   [5:0] grp_hprod_fu_708_a_address1;
wire    grp_hprod_fu_708_a_ce1;
reg   [31:0] grp_hprod_fu_708_a_q1;
wire   [5:0] grp_hprod_fu_708_b_address0;
wire    grp_hprod_fu_708_b_ce0;
reg   [31:0] grp_hprod_fu_708_b_q0;
wire   [5:0] grp_hprod_fu_708_b_address1;
wire    grp_hprod_fu_708_b_ce1;
reg   [31:0] grp_hprod_fu_708_b_q1;
wire    grp_geva_1_fu_715_ap_start;
wire    grp_geva_1_fu_715_ap_done;
wire    grp_geva_1_fu_715_ap_idle;
wire    grp_geva_1_fu_715_ap_ready;
wire   [5:0] grp_geva_1_fu_715_res_address0;
wire    grp_geva_1_fu_715_res_ce0;
wire    grp_geva_1_fu_715_res_we0;
wire   [31:0] grp_geva_1_fu_715_res_d0;
reg   [31:0] grp_geva_1_fu_715_res_q0;
wire   [5:0] grp_geva_1_fu_715_res_address1;
wire    grp_geva_1_fu_715_res_ce1;
wire    grp_geva_1_fu_715_res_we1;
wire   [31:0] grp_geva_1_fu_715_res_d1;
reg   [31:0] grp_geva_1_fu_715_res_q1;
wire   [5:0] grp_geva_1_fu_715_a_address0;
wire    grp_geva_1_fu_715_a_ce0;
reg   [31:0] grp_geva_1_fu_715_a_q0;
wire   [5:0] grp_geva_1_fu_715_a_address1;
wire    grp_geva_1_fu_715_a_ce1;
reg   [31:0] grp_geva_1_fu_715_a_q1;
reg   [5:0] phi_ln136_reg_437;
wire   [0:0] icmp_ln136_fu_740_p2;
reg   [5:0] phi_ln137_reg_448;
wire   [0:0] icmp_ln137_fu_757_p2;
reg   [5:0] phi_ln138_reg_459;
wire   [0:0] icmp_ln138_fu_774_p2;
reg   [5:0] phi_ln139_reg_470;
wire   [0:0] icmp_ln139_fu_791_p2;
reg   [5:0] phi_ln140_reg_481;
wire   [0:0] icmp_ln140_fu_808_p2;
reg   [5:0] phi_ln141_reg_492;
wire   [0:0] icmp_ln141_fu_825_p2;
reg   [4:0] i_0_reg_503;
wire    ap_CS_fsm_state45;
reg   [4:0] j_0_reg_514;
wire    ap_CS_fsm_state10;
reg   [6:0] j1_0_reg_526;
wire    ap_CS_fsm_state12;
reg   [2:0] ap_phi_mux_i_0_0_i_phi_fu_542_p4;
wire    ap_block_pp0_stage0;
reg    grp_tanh_fu_550_ap_start_reg;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state43;
reg    grp_sigmoid_fu_556_ap_start_reg;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state35;
reg    grp_gemvm_fu_562_ap_start_reg;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state31;
reg    grp_gemvm1_fu_573_ap_start_reg;
reg    grp_hprod_fu_708_ap_start_reg;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state39;
reg    grp_geva_1_fu_715_ap_start_reg;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state41;
wire   [63:0] zext_ln136_fu_735_p1;
wire   [63:0] zext_ln137_fu_752_p1;
wire   [63:0] zext_ln138_fu_769_p1;
wire   [63:0] zext_ln139_fu_786_p1;
wire   [63:0] zext_ln140_fu_803_p1;
wire   [63:0] zext_ln141_fu_820_p1;
wire   [63:0] zext_ln174_fu_898_p1;
wire   [63:0] zext_ln174_1_fu_903_p1;
wire   [63:0] zext_ln175_fu_920_p1;
wire   [63:0] zext_ln175_1_fu_931_p1;
wire   [63:0] zext_ln109_fu_942_p1;
wire    ap_block_pp0_stage1;
reg   [31:0] grp_fu_725_p0;
reg   [31:0] grp_fu_725_p1;
wire   [9:0] shl_ln_fu_843_p3;
wire   [6:0] shl_ln174_1_fu_855_p3;
wire   [10:0] zext_ln174_2_fu_851_p1;
wire   [10:0] zext_ln174_3_fu_863_p1;
wire   [10:0] zext_ln174_4_fu_873_p1;
wire   [10:0] add_ln174_fu_889_p2;
wire  signed [31:0] sext_ln174_fu_894_p1;
wire   [6:0] add_ln175_fu_925_p2;
wire   [2:0] or_ln105_fu_948_p2;
wire    ap_CS_fsm_state57;
reg   [48:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 49'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 grp_tanh_fu_550_ap_start_reg = 1'b0;
#0 grp_sigmoid_fu_556_ap_start_reg = 1'b0;
#0 grp_gemvm_fu_562_ap_start_reg = 1'b0;
#0 grp_gemvm1_fu_573_ap_start_reg = 1'b0;
#0 grp_hprod_fu_708_ap_start_reg = 1'b0;
#0 grp_geva_1_fu_715_ap_start_reg = 1'b0;
end

infer_Weight0_f #(
    .DataWidth( 32 ),
    .AddressRange( 5888 ),
    .AddressWidth( 13 ))
Weight0_f_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_gemvm_fu_562_a_address0),
    .ce0(Weight0_f_ce0),
    .q0(Weight0_f_q0),
    .address1(grp_gemvm_fu_562_a_address1),
    .ce1(Weight0_f_ce1),
    .q1(Weight0_f_q1)
);

infer_Bias0_f #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
Bias0_f_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_geva_1_fu_715_a_address0),
    .ce0(Bias0_f_ce0),
    .q0(Bias0_f_q0),
    .address1(grp_geva_1_fu_715_a_address1),
    .ce1(Bias0_f_ce1),
    .q1(Bias0_f_q1)
);

infer_Weight0_i #(
    .DataWidth( 32 ),
    .AddressRange( 5888 ),
    .AddressWidth( 13 ))
Weight0_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_gemvm_fu_562_a_address0),
    .ce0(Weight0_i_ce0),
    .q0(Weight0_i_q0),
    .address1(grp_gemvm_fu_562_a_address1),
    .ce1(Weight0_i_ce1),
    .q1(Weight0_i_q1)
);

infer_Bias0_i #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
Bias0_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_geva_1_fu_715_a_address0),
    .ce0(Bias0_i_ce0),
    .q0(Bias0_i_q0),
    .address1(grp_geva_1_fu_715_a_address1),
    .ce1(Bias0_i_ce1),
    .q1(Bias0_i_q1)
);

infer_Weight0_c #(
    .DataWidth( 32 ),
    .AddressRange( 5888 ),
    .AddressWidth( 13 ))
Weight0_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_gemvm_fu_562_a_address0),
    .ce0(Weight0_c_ce0),
    .q0(Weight0_c_q0),
    .address1(grp_gemvm_fu_562_a_address1),
    .ce1(Weight0_c_ce1),
    .q1(Weight0_c_q1)
);

infer_Bias0_c #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
Bias0_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_geva_1_fu_715_a_address0),
    .ce0(Bias0_c_ce0),
    .q0(Bias0_c_q0),
    .address1(grp_geva_1_fu_715_a_address1),
    .ce1(Bias0_c_ce1),
    .q1(Bias0_c_q1)
);

infer_Weight0_o #(
    .DataWidth( 32 ),
    .AddressRange( 5888 ),
    .AddressWidth( 13 ))
Weight0_o_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_gemvm_fu_562_a_address0),
    .ce0(Weight0_o_ce0),
    .q0(Weight0_o_q0),
    .address1(grp_gemvm_fu_562_a_address1),
    .ce1(Weight0_o_ce1),
    .q1(Weight0_o_q1)
);

infer_Bias0_o #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
Bias0_o_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_geva_1_fu_715_a_address0),
    .ce0(Bias0_o_ce0),
    .q0(Bias0_o_q0),
    .address1(grp_geva_1_fu_715_a_address1),
    .ce1(Bias0_o_ce1),
    .q1(Bias0_o_q1)
);

infer_Bias_lc #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
Bias_lc_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Bias_lc_address0),
    .ce0(Bias_lc_ce0),
    .q0(Bias_lc_q0)
);

infer_gate_f #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
gate_f_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gate_f_address0),
    .ce0(gate_f_ce0),
    .we0(gate_f_we0),
    .d0(gate_f_d0),
    .q0(gate_f_q0),
    .address1(grp_hprod_fu_708_a_address1),
    .ce1(gate_f_ce1),
    .q1(gate_f_q1)
);

infer_gate_f #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
gate_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gate_i_address0),
    .ce0(gate_i_ce0),
    .we0(gate_i_we0),
    .d0(gate_i_d0),
    .q0(gate_i_q0),
    .address1(grp_hprod_fu_708_a_address1),
    .ce1(gate_i_ce1),
    .q1(gate_i_q1)
);

infer_stat_C #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
stat_C_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(stat_C_address0),
    .ce0(stat_C_ce0),
    .we0(stat_C_we0),
    .d0(stat_C_d0),
    .q0(stat_C_q0),
    .address1(stat_C_address1),
    .ce1(stat_C_ce1),
    .we1(stat_C_we1),
    .d1(grp_tanh_fu_550_res_d1),
    .q1(stat_C_q1)
);

infer_stat_C #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
C_t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_t_address0),
    .ce0(C_t_ce0),
    .we0(C_t_we0),
    .d0(C_t_d0),
    .q0(C_t_q0),
    .address1(C_t_address1),
    .ce1(C_t_ce1),
    .we1(C_t_we1),
    .d1(C_t_d1),
    .q1(C_t_q1)
);

infer_gate_f #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
gate_o_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gate_o_address0),
    .ce0(gate_o_ce0),
    .we0(gate_o_we0),
    .d0(gate_o_d0),
    .q0(gate_o_q0),
    .address1(grp_hprod_fu_708_a_address1),
    .ce1(gate_o_ce1),
    .q1(gate_o_q1)
);

infer_stat_C #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
h_t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(h_t_address0),
    .ce0(h_t_ce0),
    .we0(h_t_we0),
    .d0(h_t_d0),
    .q0(h_t_q0),
    .address1(h_t_address1),
    .ce1(h_t_ce1),
    .we1(h_t_we1),
    .d1(grp_hprod_fu_708_res_d1),
    .q1(h_t_q1)
);

infer_vec_i #(
    .DataWidth( 32 ),
    .AddressRange( 92 ),
    .AddressWidth( 7 ))
vec_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(vec_i_address0),
    .ce0(vec_i_ce0),
    .we0(vec_i_we0),
    .d0(vec_i_d0),
    .q0(vec_i_q0),
    .address1(grp_gemvm_fu_562_b_address1),
    .ce1(vec_i_ce1),
    .q1(vec_i_q1)
);

infer_stat_C #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
vec_tmp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(vec_tmp_address0),
    .ce0(vec_tmp_ce0),
    .we0(vec_tmp_we0),
    .d0(vec_tmp_d0),
    .q0(vec_tmp_q0),
    .address1(vec_tmp_address1),
    .ce1(vec_tmp_ce1),
    .we1(vec_tmp_we1),
    .d1(vec_tmp_d1),
    .q1(vec_tmp_q1)
);

tanh grp_tanh_fu_550(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_tanh_fu_550_ap_start),
    .ap_done(grp_tanh_fu_550_ap_done),
    .ap_idle(grp_tanh_fu_550_ap_idle),
    .ap_ready(grp_tanh_fu_550_ap_ready),
    .res_address0(grp_tanh_fu_550_res_address0),
    .res_ce0(grp_tanh_fu_550_res_ce0),
    .res_we0(grp_tanh_fu_550_res_we0),
    .res_d0(grp_tanh_fu_550_res_d0),
    .res_address1(grp_tanh_fu_550_res_address1),
    .res_ce1(grp_tanh_fu_550_res_ce1),
    .res_we1(grp_tanh_fu_550_res_we1),
    .res_d1(grp_tanh_fu_550_res_d1),
    .a_address0(grp_tanh_fu_550_a_address0),
    .a_ce0(grp_tanh_fu_550_a_ce0),
    .a_q0(grp_tanh_fu_550_a_q0),
    .a_address1(grp_tanh_fu_550_a_address1),
    .a_ce1(grp_tanh_fu_550_a_ce1),
    .a_q1(grp_tanh_fu_550_a_q1)
);

sigmoid grp_sigmoid_fu_556(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sigmoid_fu_556_ap_start),
    .ap_done(grp_sigmoid_fu_556_ap_done),
    .ap_idle(grp_sigmoid_fu_556_ap_idle),
    .ap_ready(grp_sigmoid_fu_556_ap_ready),
    .res_address0(grp_sigmoid_fu_556_res_address0),
    .res_ce0(grp_sigmoid_fu_556_res_ce0),
    .res_we0(grp_sigmoid_fu_556_res_we0),
    .res_d0(grp_sigmoid_fu_556_res_d0),
    .a_address0(grp_sigmoid_fu_556_a_address0),
    .a_ce0(grp_sigmoid_fu_556_a_ce0),
    .a_q0(vec_tmp_q0)
);

gemvm grp_gemvm_fu_562(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gemvm_fu_562_ap_start),
    .ap_done(grp_gemvm_fu_562_ap_done),
    .ap_idle(grp_gemvm_fu_562_ap_idle),
    .ap_ready(grp_gemvm_fu_562_ap_ready),
    .res_address0(grp_gemvm_fu_562_res_address0),
    .res_ce0(grp_gemvm_fu_562_res_ce0),
    .res_we0(grp_gemvm_fu_562_res_we0),
    .res_d0(grp_gemvm_fu_562_res_d0),
    .res_q0(vec_tmp_q0),
    .a_address0(grp_gemvm_fu_562_a_address0),
    .a_ce0(grp_gemvm_fu_562_a_ce0),
    .a_q0(grp_gemvm_fu_562_a_q0),
    .a_address1(grp_gemvm_fu_562_a_address1),
    .a_ce1(grp_gemvm_fu_562_a_ce1),
    .a_q1(grp_gemvm_fu_562_a_q1),
    .b_address0(grp_gemvm_fu_562_b_address0),
    .b_ce0(grp_gemvm_fu_562_b_ce0),
    .b_q0(vec_i_q0),
    .b_address1(grp_gemvm_fu_562_b_address1),
    .b_ce1(grp_gemvm_fu_562_b_ce1),
    .b_q1(vec_i_q1)
);

gemvm1 grp_gemvm1_fu_573(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gemvm1_fu_573_ap_start),
    .ap_done(grp_gemvm1_fu_573_ap_done),
    .ap_idle(grp_gemvm1_fu_573_ap_idle),
    .ap_ready(grp_gemvm1_fu_573_ap_ready),
    .res_address0(grp_gemvm1_fu_573_res_address0),
    .res_ce0(grp_gemvm1_fu_573_res_ce0),
    .res_we0(grp_gemvm1_fu_573_res_we0),
    .res_d0(grp_gemvm1_fu_573_res_d0),
    .res_q0(res_q0),
    .b_address0(grp_gemvm1_fu_573_b_address0),
    .b_ce0(grp_gemvm1_fu_573_b_ce0),
    .b_q0(h_t_q0),
    .b_address1(grp_gemvm1_fu_573_b_address1),
    .b_ce1(grp_gemvm1_fu_573_b_ce1),
    .b_q1(h_t_q1)
);

hprod grp_hprod_fu_708(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_hprod_fu_708_ap_start),
    .ap_done(grp_hprod_fu_708_ap_done),
    .ap_idle(grp_hprod_fu_708_ap_idle),
    .ap_ready(grp_hprod_fu_708_ap_ready),
    .res_address0(grp_hprod_fu_708_res_address0),
    .res_ce0(grp_hprod_fu_708_res_ce0),
    .res_we0(grp_hprod_fu_708_res_we0),
    .res_d0(grp_hprod_fu_708_res_d0),
    .res_address1(grp_hprod_fu_708_res_address1),
    .res_ce1(grp_hprod_fu_708_res_ce1),
    .res_we1(grp_hprod_fu_708_res_we1),
    .res_d1(grp_hprod_fu_708_res_d1),
    .a_address0(grp_hprod_fu_708_a_address0),
    .a_ce0(grp_hprod_fu_708_a_ce0),
    .a_q0(grp_hprod_fu_708_a_q0),
    .a_address1(grp_hprod_fu_708_a_address1),
    .a_ce1(grp_hprod_fu_708_a_ce1),
    .a_q1(grp_hprod_fu_708_a_q1),
    .b_address0(grp_hprod_fu_708_b_address0),
    .b_ce0(grp_hprod_fu_708_b_ce0),
    .b_q0(grp_hprod_fu_708_b_q0),
    .b_address1(grp_hprod_fu_708_b_address1),
    .b_ce1(grp_hprod_fu_708_b_ce1),
    .b_q1(grp_hprod_fu_708_b_q1)
);

geva_1 grp_geva_1_fu_715(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_geva_1_fu_715_ap_start),
    .ap_done(grp_geva_1_fu_715_ap_done),
    .ap_idle(grp_geva_1_fu_715_ap_idle),
    .ap_ready(grp_geva_1_fu_715_ap_ready),
    .res_address0(grp_geva_1_fu_715_res_address0),
    .res_ce0(grp_geva_1_fu_715_res_ce0),
    .res_we0(grp_geva_1_fu_715_res_we0),
    .res_d0(grp_geva_1_fu_715_res_d0),
    .res_q0(grp_geva_1_fu_715_res_q0),
    .res_address1(grp_geva_1_fu_715_res_address1),
    .res_ce1(grp_geva_1_fu_715_res_ce1),
    .res_we1(grp_geva_1_fu_715_res_we1),
    .res_d1(grp_geva_1_fu_715_res_d1),
    .res_q1(grp_geva_1_fu_715_res_q1),
    .a_address0(grp_geva_1_fu_715_a_address0),
    .a_ce0(grp_geva_1_fu_715_a_ce0),
    .a_q0(grp_geva_1_fu_715_a_q0),
    .a_address1(grp_geva_1_fu_715_a_address1),
    .a_ce1(grp_geva_1_fu_715_a_ce1),
    .a_q1(grp_geva_1_fu_715_a_q1)
);

LSTM_Top_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LSTM_Top_fadd_32nbkb_U119(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_725_p0),
    .din1(grp_fu_725_p1),
    .ce(1'b1),
    .dout(grp_fu_725_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_predicate_tran54to57_state48 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((grp_gemvm1_fu_573_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((((grp_gemvm1_fu_573_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state46)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_pp0_exit_iter3_state54) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_pp0_exit_iter3_state54) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((grp_gemvm1_fu_573_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gemvm1_fu_573_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln147_fu_831_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
            grp_gemvm1_fu_573_ap_start_reg <= 1'b1;
        end else if ((grp_gemvm1_fu_573_ap_ready == 1'b1)) begin
            grp_gemvm1_fu_573_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gemvm_fu_562_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state18) | ((icmp_ln175_fu_908_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11)))) begin
            grp_gemvm_fu_562_ap_start_reg <= 1'b1;
        end else if ((grp_gemvm_fu_562_ap_ready == 1'b1)) begin
            grp_gemvm_fu_562_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_geva_1_fu_715_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state14))) begin
            grp_geva_1_fu_715_ap_start_reg <= 1'b1;
        end else if ((grp_geva_1_fu_715_ap_ready == 1'b1)) begin
            grp_geva_1_fu_715_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_hprod_fu_708_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state36))) begin
            grp_hprod_fu_708_ap_start_reg <= 1'b1;
        end else if ((grp_hprod_fu_708_ap_ready == 1'b1)) begin
            grp_hprod_fu_708_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sigmoid_fu_556_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16))) begin
            grp_sigmoid_fu_556_ap_start_reg <= 1'b1;
        end else if ((grp_sigmoid_fu_556_ap_ready == 1'b1)) begin
            grp_sigmoid_fu_556_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_tanh_fu_550_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state28))) begin
            grp_tanh_fu_550_ap_start_reg <= 1'b1;
        end else if ((grp_tanh_fu_550_ap_ready == 1'b1)) begin
            grp_tanh_fu_550_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln105_1_reg_1072 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln105_reg_1058 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_0_i_reg_538 <= add_ln105_reg_1106;
    end else if (((grp_gemvm1_fu_573_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
        i_0_0_i_reg_538 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln141_fu_825_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_0_reg_503 <= 5'd0;
    end else if (((grp_hprod_fu_708_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
        i_0_reg_503 <= i_reg_1022;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln174_fu_877_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        j1_0_reg_526 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        j1_0_reg_526 <= j_1_reg_1048;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_fu_831_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        j_0_reg_514 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        j_0_reg_514 <= j_reg_1035;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln136_fu_740_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln136_reg_437 <= add_ln136_fu_729_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln136_reg_437 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln136_fu_740_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln137_reg_448 <= 6'd0;
    end else if (((icmp_ln137_fu_757_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln137_reg_448 <= add_ln137_fu_746_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln137_fu_757_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln138_reg_459 <= 6'd0;
    end else if (((icmp_ln138_fu_774_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln138_reg_459 <= add_ln138_fu_763_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln138_fu_774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln139_reg_470 <= 6'd0;
    end else if (((icmp_ln139_fu_791_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_ln139_reg_470 <= add_ln139_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln139_fu_791_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_ln140_reg_481 <= 6'd0;
    end else if (((icmp_ln140_fu_808_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_ln140_reg_481 <= add_ln140_fu_797_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln140_fu_808_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_ln141_reg_492 <= 6'd0;
    end else if (((icmp_ln141_fu_825_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        phi_ln141_reg_492 <= add_ln141_fu_814_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln105_1_reg_1072 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln105_reg_1058 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Bias_lc_load_1_reg_1111 <= Bias_lc_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln105_reg_1058 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Bias_lc_load_reg_1086 <= Bias_lc_q0;
        res_load_reg_1091 <= res_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln105_1_reg_1072 == 1'd1) & (icmp_ln105_reg_1058 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln105_reg_1106 <= add_ln105_fu_965_p2;
        res_load_1_reg_1101 <= res_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_1022 <= i_fu_837_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln105_fu_936_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln105_1_reg_1072 <= icmp_ln105_1_fu_954_p2;
        res_addr_reg_1067 <= zext_ln109_fu_942_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln105_1_reg_1072_pp0_iter1_reg <= icmp_ln105_1_reg_1072;
        icmp_ln105_1_reg_1072_pp0_iter2_reg <= icmp_ln105_1_reg_1072_pp0_iter1_reg;
        icmp_ln105_1_reg_1072_pp0_iter3_reg <= icmp_ln105_1_reg_1072_pp0_iter2_reg;
        icmp_ln105_1_reg_1072_pp0_iter4_reg <= icmp_ln105_1_reg_1072_pp0_iter3_reg;
        icmp_ln105_reg_1058 <= icmp_ln105_fu_936_p2;
        icmp_ln105_reg_1058_pp0_iter1_reg <= icmp_ln105_reg_1058;
        icmp_ln105_reg_1058_pp0_iter2_reg <= icmp_ln105_reg_1058_pp0_iter1_reg;
        icmp_ln105_reg_1058_pp0_iter3_reg <= icmp_ln105_reg_1058_pp0_iter2_reg;
        icmp_ln105_reg_1058_pp0_iter4_reg <= icmp_ln105_reg_1058_pp0_iter3_reg;
        res_addr_2_reg_1081_pp0_iter1_reg[2 : 1] <= res_addr_2_reg_1081[2 : 1];
        res_addr_2_reg_1081_pp0_iter2_reg[2 : 1] <= res_addr_2_reg_1081_pp0_iter1_reg[2 : 1];
        res_addr_2_reg_1081_pp0_iter3_reg[2 : 1] <= res_addr_2_reg_1081_pp0_iter2_reg[2 : 1];
        res_addr_2_reg_1081_pp0_iter4_reg[2 : 1] <= res_addr_2_reg_1081_pp0_iter3_reg[2 : 1];
        res_addr_reg_1067_pp0_iter1_reg <= res_addr_reg_1067;
        res_addr_reg_1067_pp0_iter2_reg <= res_addr_reg_1067_pp0_iter1_reg;
        res_addr_reg_1067_pp0_iter3_reg <= res_addr_reg_1067_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_1_reg_1048 <= j_1_fu_914_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_1035 <= j_fu_883_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln105_1_fu_954_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln105_fu_936_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_addr_2_reg_1081[2 : 1] <= zext_ln109_1_fu_960_p1[2 : 1];
        zext_ln109_1_reg_1076[2 : 1] <= zext_ln109_1_fu_960_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_fu_831_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sub_ln174_reg_1027[10 : 2] <= sub_ln174_fu_867_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln105_reg_1058_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp9_i_reg_1116 <= grp_fu_725_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln105_1_reg_1072_pp0_iter3_reg == 1'd1) & (icmp_ln105_reg_1058_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_1_i_reg_1121 <= grp_fu_725_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        Bias0_c_ce0 = grp_geva_1_fu_715_a_ce0;
    end else begin
        Bias0_c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        Bias0_c_ce1 = grp_geva_1_fu_715_a_ce1;
    end else begin
        Bias0_c_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        Bias0_f_ce0 = grp_geva_1_fu_715_a_ce0;
    end else begin
        Bias0_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        Bias0_f_ce1 = grp_geva_1_fu_715_a_ce1;
    end else begin
        Bias0_f_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        Bias0_i_ce0 = grp_geva_1_fu_715_a_ce0;
    end else begin
        Bias0_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        Bias0_i_ce1 = grp_geva_1_fu_715_a_ce1;
    end else begin
        Bias0_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        Bias0_o_ce0 = grp_geva_1_fu_715_a_ce0;
    end else begin
        Bias0_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        Bias0_o_ce1 = grp_geva_1_fu_715_a_ce1;
    end else begin
        Bias0_o_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            Bias_lc_address0 = zext_ln109_1_reg_1076;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            Bias_lc_address0 = zext_ln109_fu_942_p1;
        end else begin
            Bias_lc_address0 = 'bx;
        end
    end else begin
        Bias_lc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        Bias_lc_ce0 = 1'b1;
    end else begin
        Bias_lc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_t_address0 = zext_ln139_fu_786_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        C_t_address0 = grp_geva_1_fu_715_res_address0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        C_t_address0 = grp_hprod_fu_708_b_address0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        C_t_address0 = grp_hprod_fu_708_res_address0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        C_t_address0 = grp_tanh_fu_550_a_address0;
    end else begin
        C_t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        C_t_address1 = grp_geva_1_fu_715_res_address1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        C_t_address1 = grp_hprod_fu_708_b_address1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        C_t_address1 = grp_hprod_fu_708_res_address1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        C_t_address1 = grp_tanh_fu_550_a_address1;
    end else begin
        C_t_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_t_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        C_t_ce0 = grp_geva_1_fu_715_res_ce0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        C_t_ce0 = grp_hprod_fu_708_b_ce0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        C_t_ce0 = grp_hprod_fu_708_res_ce0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        C_t_ce0 = grp_tanh_fu_550_a_ce0;
    end else begin
        C_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        C_t_ce1 = grp_geva_1_fu_715_res_ce1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        C_t_ce1 = grp_hprod_fu_708_b_ce1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        C_t_ce1 = grp_hprod_fu_708_res_ce1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        C_t_ce1 = grp_tanh_fu_550_a_ce1;
    end else begin
        C_t_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_t_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        C_t_d0 = grp_geva_1_fu_715_res_d0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        C_t_d0 = grp_hprod_fu_708_res_d0;
    end else begin
        C_t_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        C_t_d1 = grp_geva_1_fu_715_res_d1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        C_t_d1 = grp_hprod_fu_708_res_d1;
    end else begin
        C_t_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        C_t_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        C_t_we0 = grp_geva_1_fu_715_res_we0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        C_t_we0 = grp_hprod_fu_708_res_we0;
    end else begin
        C_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        C_t_we1 = grp_geva_1_fu_715_res_we1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        C_t_we1 = grp_hprod_fu_708_res_we1;
    end else begin
        C_t_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        Weight0_c_ce0 = grp_gemvm_fu_562_a_ce0;
    end else begin
        Weight0_c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        Weight0_c_ce1 = grp_gemvm_fu_562_a_ce1;
    end else begin
        Weight0_c_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        Weight0_f_ce0 = grp_gemvm_fu_562_a_ce0;
    end else begin
        Weight0_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        Weight0_f_ce1 = grp_gemvm_fu_562_a_ce1;
    end else begin
        Weight0_f_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        Weight0_i_ce0 = grp_gemvm_fu_562_a_ce0;
    end else begin
        Weight0_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        Weight0_i_ce1 = grp_gemvm_fu_562_a_ce1;
    end else begin
        Weight0_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        Weight0_o_ce0 = grp_gemvm_fu_562_a_ce0;
    end else begin
        Weight0_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        Weight0_o_ce1 = grp_gemvm_fu_562_a_ce1;
    end else begin
        Weight0_o_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_condition_pp0_exit_iter3_state54 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter3_state54 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln105_1_reg_1072 == 1'd1) & (icmp_ln105_reg_1058 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_0_i_phi_fu_542_p4 = add_ln105_reg_1106;
    end else begin
        ap_phi_mux_i_0_0_i_phi_fu_542_p4 = i_0_0_i_reg_538;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gate_f_address0 = zext_ln136_fu_735_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        gate_f_address0 = grp_hprod_fu_708_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        gate_f_address0 = grp_sigmoid_fu_556_res_address0;
    end else begin
        gate_f_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gate_f_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        gate_f_ce0 = grp_hprod_fu_708_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        gate_f_ce0 = grp_sigmoid_fu_556_res_ce0;
    end else begin
        gate_f_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        gate_f_ce1 = grp_hprod_fu_708_a_ce1;
    end else begin
        gate_f_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gate_f_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        gate_f_d0 = grp_sigmoid_fu_556_res_d0;
    end else begin
        gate_f_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gate_f_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        gate_f_we0 = grp_sigmoid_fu_556_res_we0;
    end else begin
        gate_f_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gate_i_address0 = zext_ln137_fu_752_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        gate_i_address0 = grp_hprod_fu_708_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        gate_i_address0 = grp_sigmoid_fu_556_res_address0;
    end else begin
        gate_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gate_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        gate_i_ce0 = grp_hprod_fu_708_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        gate_i_ce0 = grp_sigmoid_fu_556_res_ce0;
    end else begin
        gate_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        gate_i_ce1 = grp_hprod_fu_708_a_ce1;
    end else begin
        gate_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gate_i_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        gate_i_d0 = grp_sigmoid_fu_556_res_d0;
    end else begin
        gate_i_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gate_i_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        gate_i_we0 = grp_sigmoid_fu_556_res_we0;
    end else begin
        gate_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gate_o_address0 = zext_ln140_fu_803_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        gate_o_address0 = grp_hprod_fu_708_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        gate_o_address0 = grp_sigmoid_fu_556_res_address0;
    end else begin
        gate_o_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gate_o_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        gate_o_ce0 = grp_hprod_fu_708_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        gate_o_ce0 = grp_sigmoid_fu_556_res_ce0;
    end else begin
        gate_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        gate_o_ce1 = grp_hprod_fu_708_a_ce1;
    end else begin
        gate_o_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gate_o_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        gate_o_d0 = grp_sigmoid_fu_556_res_d0;
    end else begin
        gate_o_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        gate_o_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        gate_o_we0 = grp_sigmoid_fu_556_res_we0;
    end else begin
        gate_o_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_725_p0 = res_load_1_reg_1101;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_725_p0 = res_load_reg_1091;
        end else begin
            grp_fu_725_p0 = 'bx;
        end
    end else begin
        grp_fu_725_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_725_p1 = Bias_lc_load_1_reg_1111;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_725_p1 = Bias_lc_load_reg_1086;
        end else begin
            grp_fu_725_p1 = 'bx;
        end
    end else begin
        grp_fu_725_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_gemvm_fu_562_a_q0 = Weight0_o_q0;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_gemvm_fu_562_a_q0 = Weight0_c_q0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_gemvm_fu_562_a_q0 = Weight0_i_q0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_gemvm_fu_562_a_q0 = Weight0_f_q0;
    end else begin
        grp_gemvm_fu_562_a_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_gemvm_fu_562_a_q1 = Weight0_o_q1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_gemvm_fu_562_a_q1 = Weight0_c_q1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_gemvm_fu_562_a_q1 = Weight0_i_q1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_gemvm_fu_562_a_q1 = Weight0_f_q1;
    end else begin
        grp_gemvm_fu_562_a_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_geva_1_fu_715_a_q0 = vec_tmp_q0;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_geva_1_fu_715_a_q0 = Bias0_o_q0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_geva_1_fu_715_a_q0 = Bias0_c_q0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_geva_1_fu_715_a_q0 = Bias0_i_q0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_geva_1_fu_715_a_q0 = Bias0_f_q0;
    end else begin
        grp_geva_1_fu_715_a_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_geva_1_fu_715_a_q1 = vec_tmp_q1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_geva_1_fu_715_a_q1 = Bias0_o_q1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_geva_1_fu_715_a_q1 = Bias0_c_q1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_geva_1_fu_715_a_q1 = Bias0_i_q1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_geva_1_fu_715_a_q1 = Bias0_f_q1;
    end else begin
        grp_geva_1_fu_715_a_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_geva_1_fu_715_res_q0 = C_t_q0;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_geva_1_fu_715_res_q0 = vec_tmp_q0;
    end else begin
        grp_geva_1_fu_715_res_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        grp_geva_1_fu_715_res_q1 = C_t_q1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_geva_1_fu_715_res_q1 = vec_tmp_q1;
    end else begin
        grp_geva_1_fu_715_res_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_hprod_fu_708_a_q0 = gate_o_q0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_hprod_fu_708_a_q0 = gate_i_q0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_hprod_fu_708_a_q0 = gate_f_q0;
    end else begin
        grp_hprod_fu_708_a_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_hprod_fu_708_a_q1 = gate_o_q1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_hprod_fu_708_a_q1 = gate_i_q1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_hprod_fu_708_a_q1 = gate_f_q1;
    end else begin
        grp_hprod_fu_708_a_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_hprod_fu_708_b_q0 = vec_tmp_q0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_hprod_fu_708_b_q0 = stat_C_q0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_hprod_fu_708_b_q0 = C_t_q0;
    end else begin
        grp_hprod_fu_708_b_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_hprod_fu_708_b_q1 = vec_tmp_q1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_hprod_fu_708_b_q1 = stat_C_q1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_hprod_fu_708_b_q1 = C_t_q1;
    end else begin
        grp_hprod_fu_708_b_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_tanh_fu_550_a_q0 = C_t_q0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_tanh_fu_550_a_q0 = vec_tmp_q0;
    end else begin
        grp_tanh_fu_550_a_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_tanh_fu_550_a_q1 = C_t_q1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_tanh_fu_550_a_q1 = vec_tmp_q1;
    end else begin
        grp_tanh_fu_550_a_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        h_t_address0 = zext_ln175_fu_920_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        h_t_address0 = zext_ln141_fu_820_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        h_t_address0 = grp_hprod_fu_708_res_address0;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        h_t_address0 = grp_gemvm1_fu_573_b_address0;
    end else begin
        h_t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        h_t_address1 = grp_hprod_fu_708_res_address1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        h_t_address1 = grp_gemvm1_fu_573_b_address1;
    end else begin
        h_t_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        h_t_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        h_t_ce0 = grp_hprod_fu_708_res_ce0;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        h_t_ce0 = grp_gemvm1_fu_573_b_ce0;
    end else begin
        h_t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        h_t_ce1 = grp_hprod_fu_708_res_ce1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        h_t_ce1 = grp_gemvm1_fu_573_b_ce1;
    end else begin
        h_t_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        h_t_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        h_t_d0 = grp_hprod_fu_708_res_d0;
    end else begin
        h_t_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        h_t_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        h_t_we0 = grp_hprod_fu_708_res_we0;
    end else begin
        h_t_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        h_t_we1 = grp_hprod_fu_708_res_we1;
    end else begin
        h_t_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_address0 = res_addr_reg_1067_pp0_iter3_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_address0 = zext_ln109_fu_942_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        res_address0 = grp_gemvm1_fu_573_res_address0;
    end else begin
        res_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_address1 = res_addr_2_reg_1081_pp0_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_address1 = zext_ln109_1_fu_960_p1;
    end else begin
        res_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        res_ce0 = grp_gemvm1_fu_573_res_ce0;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_ce1 = 1'b1;
    end else begin
        res_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_d0 = tmp9_i_reg_1116;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        res_d0 = grp_gemvm1_fu_573_res_d0;
    end else begin
        res_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln105_reg_1058_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        res_we0 = grp_gemvm1_fu_573_res_we0;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln105_1_reg_1072_pp0_iter4_reg == 1'd1) & (icmp_ln105_reg_1058_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        res_we1 = 1'b1;
    end else begin
        res_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stat_C_address0 = zext_ln138_fu_769_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        stat_C_address0 = grp_hprod_fu_708_b_address0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        stat_C_address0 = grp_tanh_fu_550_res_address0;
    end else begin
        stat_C_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        stat_C_address1 = grp_hprod_fu_708_b_address1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        stat_C_address1 = grp_tanh_fu_550_res_address1;
    end else begin
        stat_C_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stat_C_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        stat_C_ce0 = grp_hprod_fu_708_b_ce0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        stat_C_ce0 = grp_tanh_fu_550_res_ce0;
    end else begin
        stat_C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        stat_C_ce1 = grp_hprod_fu_708_b_ce1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        stat_C_ce1 = grp_tanh_fu_550_res_ce1;
    end else begin
        stat_C_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stat_C_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        stat_C_d0 = grp_tanh_fu_550_res_d0;
    end else begin
        stat_C_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stat_C_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        stat_C_we0 = grp_tanh_fu_550_res_we0;
    end else begin
        stat_C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        stat_C_we1 = grp_tanh_fu_550_res_we1;
    end else begin
        stat_C_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        vec_i_address0 = zext_ln175_1_fu_931_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        vec_i_address0 = zext_ln174_1_fu_903_p1;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        vec_i_address0 = grp_gemvm_fu_562_b_address0;
    end else begin
        vec_i_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        vec_i_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        vec_i_ce0 = grp_gemvm_fu_562_b_ce0;
    end else begin
        vec_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        vec_i_ce1 = grp_gemvm_fu_562_b_ce1;
    end else begin
        vec_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        vec_i_d0 = h_t_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        vec_i_d0 = input_r_q0;
    end else begin
        vec_i_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        vec_i_we0 = 1'b1;
    end else begin
        vec_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        vec_tmp_address0 = grp_geva_1_fu_715_a_address0;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15))) begin
        vec_tmp_address0 = grp_geva_1_fu_715_res_address0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        vec_tmp_address0 = grp_hprod_fu_708_b_address0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        vec_tmp_address0 = grp_hprod_fu_708_res_address0;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        vec_tmp_address0 = grp_gemvm_fu_562_res_address0;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state17))) begin
        vec_tmp_address0 = grp_sigmoid_fu_556_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        vec_tmp_address0 = grp_tanh_fu_550_a_address0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vec_tmp_address0 = grp_tanh_fu_550_res_address0;
    end else begin
        vec_tmp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        vec_tmp_address1 = grp_geva_1_fu_715_a_address1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15))) begin
        vec_tmp_address1 = grp_geva_1_fu_715_res_address1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        vec_tmp_address1 = grp_hprod_fu_708_b_address1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        vec_tmp_address1 = grp_hprod_fu_708_res_address1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        vec_tmp_address1 = grp_tanh_fu_550_a_address1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vec_tmp_address1 = grp_tanh_fu_550_res_address1;
    end else begin
        vec_tmp_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        vec_tmp_ce0 = grp_geva_1_fu_715_a_ce0;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15))) begin
        vec_tmp_ce0 = grp_geva_1_fu_715_res_ce0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        vec_tmp_ce0 = grp_hprod_fu_708_b_ce0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        vec_tmp_ce0 = grp_hprod_fu_708_res_ce0;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        vec_tmp_ce0 = grp_gemvm_fu_562_res_ce0;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state17))) begin
        vec_tmp_ce0 = grp_sigmoid_fu_556_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        vec_tmp_ce0 = grp_tanh_fu_550_a_ce0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vec_tmp_ce0 = grp_tanh_fu_550_res_ce0;
    end else begin
        vec_tmp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        vec_tmp_ce1 = grp_geva_1_fu_715_a_ce1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15))) begin
        vec_tmp_ce1 = grp_geva_1_fu_715_res_ce1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        vec_tmp_ce1 = grp_hprod_fu_708_b_ce1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        vec_tmp_ce1 = grp_hprod_fu_708_res_ce1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        vec_tmp_ce1 = grp_tanh_fu_550_a_ce1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vec_tmp_ce1 = grp_tanh_fu_550_res_ce1;
    end else begin
        vec_tmp_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15))) begin
        vec_tmp_d0 = grp_geva_1_fu_715_res_d0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        vec_tmp_d0 = grp_hprod_fu_708_res_d0;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        vec_tmp_d0 = grp_gemvm_fu_562_res_d0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vec_tmp_d0 = grp_tanh_fu_550_res_d0;
    end else begin
        vec_tmp_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15))) begin
        vec_tmp_d1 = grp_geva_1_fu_715_res_d1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        vec_tmp_d1 = grp_hprod_fu_708_res_d1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vec_tmp_d1 = grp_tanh_fu_550_res_d1;
    end else begin
        vec_tmp_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15))) begin
        vec_tmp_we0 = grp_geva_1_fu_715_res_we0;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        vec_tmp_we0 = grp_hprod_fu_708_res_we0;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        vec_tmp_we0 = grp_gemvm_fu_562_res_we0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vec_tmp_we0 = grp_tanh_fu_550_res_we0;
    end else begin
        vec_tmp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state15))) begin
        vec_tmp_we1 = grp_geva_1_fu_715_res_we1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        vec_tmp_we1 = grp_hprod_fu_708_res_we1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        vec_tmp_we1 = grp_tanh_fu_550_res_we1;
    end else begin
        vec_tmp_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln136_fu_740_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln137_fu_757_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln138_fu_774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln139_fu_791_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln140_fu_808_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln141_fu_825_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln147_fu_831_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln174_fu_877_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln175_fu_908_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_gemvm_fu_562_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((grp_geva_1_fu_715_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_sigmoid_fu_556_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((grp_gemvm_fu_562_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((grp_geva_1_fu_715_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((grp_sigmoid_fu_556_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_gemvm_fu_562_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((grp_geva_1_fu_715_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((grp_tanh_fu_550_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((grp_gemvm_fu_562_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((grp_geva_1_fu_715_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if (((grp_sigmoid_fu_556_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((grp_hprod_fu_708_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((grp_hprod_fu_708_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((grp_geva_1_fu_715_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((grp_tanh_fu_550_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((grp_hprod_fu_708_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((grp_gemvm1_fu_573_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln105_fu_965_p2 = (i_0_0_i_reg_538 + 3'd2);

assign add_ln136_fu_729_p2 = (phi_ln136_reg_437 + 6'd1);

assign add_ln137_fu_746_p2 = (phi_ln137_reg_448 + 6'd1);

assign add_ln138_fu_763_p2 = (phi_ln138_reg_459 + 6'd1);

assign add_ln139_fu_780_p2 = (phi_ln139_reg_470 + 6'd1);

assign add_ln140_fu_797_p2 = (phi_ln140_reg_481 + 6'd1);

assign add_ln141_fu_814_p2 = (phi_ln141_reg_492 + 6'd1);

assign add_ln174_fu_889_p2 = (sub_ln174_reg_1027 + zext_ln174_4_fu_873_p1);

assign add_ln175_fu_925_p2 = (j1_0_reg_526 + 7'd28);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_tran54to57_state48 = ((icmp_ln105_1_reg_1072 == 1'd0) | (icmp_ln105_reg_1058 == 1'd0));
end

assign grp_gemvm1_fu_573_ap_start = grp_gemvm1_fu_573_ap_start_reg;

assign grp_gemvm_fu_562_ap_start = grp_gemvm_fu_562_ap_start_reg;

assign grp_geva_1_fu_715_ap_start = grp_geva_1_fu_715_ap_start_reg;

assign grp_hprod_fu_708_ap_start = grp_hprod_fu_708_ap_start_reg;

assign grp_sigmoid_fu_556_ap_start = grp_sigmoid_fu_556_ap_start_reg;

assign grp_tanh_fu_550_ap_start = grp_tanh_fu_550_ap_start_reg;

assign i_fu_837_p2 = (i_0_reg_503 + 5'd1);

assign icmp_ln105_1_fu_954_p2 = ((or_ln105_fu_948_p2 < 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln105_fu_936_p2 = ((ap_phi_mux_i_0_0_i_phi_fu_542_p4 < 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln136_fu_740_p2 = ((phi_ln136_reg_437 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln137_fu_757_p2 = ((phi_ln137_reg_448 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln138_fu_774_p2 = ((phi_ln138_reg_459 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln139_fu_791_p2 = ((phi_ln139_reg_470 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln140_fu_808_p2 = ((phi_ln140_reg_481 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln141_fu_825_p2 = ((phi_ln141_reg_492 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln147_fu_831_p2 = ((i_0_reg_503 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_877_p2 = ((j_0_reg_514 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln175_fu_908_p2 = ((j1_0_reg_526 == 7'd64) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln174_fu_898_p1;

assign j_1_fu_914_p2 = (j1_0_reg_526 + 7'd1);

assign j_fu_883_p2 = (j_0_reg_514 + 5'd1);

assign or_ln105_fu_948_p2 = (ap_phi_mux_i_0_0_i_phi_fu_542_p4 | 3'd1);

assign res_d1 = tmp_1_i_reg_1121;

assign sext_ln174_fu_894_p1 = $signed(add_ln174_fu_889_p2);

assign shl_ln174_1_fu_855_p3 = {{i_0_reg_503}, {2'd0}};

assign shl_ln_fu_843_p3 = {{i_0_reg_503}, {5'd0}};

assign sub_ln174_fu_867_p2 = (zext_ln174_2_fu_851_p1 - zext_ln174_3_fu_863_p1);

assign zext_ln109_1_fu_960_p1 = or_ln105_fu_948_p2;

assign zext_ln109_fu_942_p1 = ap_phi_mux_i_0_0_i_phi_fu_542_p4;

assign zext_ln136_fu_735_p1 = phi_ln136_reg_437;

assign zext_ln137_fu_752_p1 = phi_ln137_reg_448;

assign zext_ln138_fu_769_p1 = phi_ln138_reg_459;

assign zext_ln139_fu_786_p1 = phi_ln139_reg_470;

assign zext_ln140_fu_803_p1 = phi_ln140_reg_481;

assign zext_ln141_fu_820_p1 = phi_ln141_reg_492;

assign zext_ln174_1_fu_903_p1 = j_0_reg_514;

assign zext_ln174_2_fu_851_p1 = shl_ln_fu_843_p3;

assign zext_ln174_3_fu_863_p1 = shl_ln174_1_fu_855_p3;

assign zext_ln174_4_fu_873_p1 = j_0_reg_514;

assign zext_ln174_fu_898_p1 = $unsigned(sext_ln174_fu_894_p1);

assign zext_ln175_1_fu_931_p1 = add_ln175_fu_925_p2;

assign zext_ln175_fu_920_p1 = j1_0_reg_526;

always @ (posedge ap_clk) begin
    sub_ln174_reg_1027[1:0] <= 2'b00;
    zext_ln109_1_reg_1076[0] <= 1'b1;
    zext_ln109_1_reg_1076[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    res_addr_2_reg_1081[0] <= 1'b1;
    res_addr_2_reg_1081_pp0_iter1_reg[0] <= 1'b1;
    res_addr_2_reg_1081_pp0_iter2_reg[0] <= 1'b1;
    res_addr_2_reg_1081_pp0_iter3_reg[0] <= 1'b1;
    res_addr_2_reg_1081_pp0_iter4_reg[0] <= 1'b1;
end

endmodule //infer
