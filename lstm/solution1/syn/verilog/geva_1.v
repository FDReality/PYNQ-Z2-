// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module geva_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_q0,
        res_address1,
        res_ce1,
        res_we1,
        res_d1,
        res_q1,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state12 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;
input  [31:0] res_q0;
output  [5:0] res_address1;
output   res_ce1;
output   res_we1;
output  [31:0] res_d1;
input  [31:0] res_q1;
output  [5:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [5:0] a_address1;
output   a_ce1;
input  [31:0] a_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] res_address0;
reg res_ce0;
reg res_we0;
reg[5:0] res_address1;
reg res_ce1;
reg res_we1;
reg a_ce0;
reg a_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] i_0_0_reg_86;
wire   [0:0] tmp_2_fu_102_p3;
reg   [0:0] tmp_2_reg_138;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_2_reg_138_pp0_iter1_reg;
reg   [0:0] tmp_2_reg_138_pp0_iter2_reg;
reg   [0:0] tmp_2_reg_138_pp0_iter3_reg;
reg   [0:0] tmp_2_reg_138_pp0_iter4_reg;
reg   [5:0] res_addr_reg_147;
reg   [5:0] res_addr_reg_147_pp0_iter1_reg;
reg   [5:0] res_addr_reg_147_pp0_iter2_reg;
reg   [5:0] res_addr_reg_147_pp0_iter3_reg;
reg   [5:0] res_addr_3_reg_157;
reg   [5:0] res_addr_3_reg_157_pp0_iter1_reg;
reg   [5:0] res_addr_3_reg_157_pp0_iter2_reg;
reg   [5:0] res_addr_3_reg_157_pp0_iter3_reg;
reg   [5:0] res_addr_3_reg_157_pp0_iter4_reg;
reg   [31:0] a_load_reg_162;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_state11_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] res_load_reg_167;
reg   [31:0] a_load_1_reg_172;
reg   [31:0] res_load_1_reg_177;
wire   [6:0] add_ln105_fu_132_p2;
reg   [6:0] add_ln105_reg_182;
wire   [31:0] grp_fu_98_p2;
reg   [31:0] tmp8_reg_187;
reg    ap_enable_reg_pp0_iter3;
reg   [31:0] tmp_1_reg_192;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg   [6:0] ap_phi_mux_i_0_0_phi_fu_90_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln109_fu_114_p1;
wire   [63:0] zext_ln109_1_fu_126_p1;
wire    ap_block_pp0_stage1;
reg   [31:0] grp_fu_98_p0;
reg   [31:0] grp_fu_98_p1;
wire   [5:0] trunc_ln105_fu_110_p1;
wire   [5:0] or_ln105_fu_120_p2;
wire    ap_CS_fsm_state12;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

LSTM_Top_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LSTM_Top_fadd_32nbkb_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_98_p0),
    .din1(grp_fu_98_p1),
    .ce(1'b1),
    .dout(grp_fu_98_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_138 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_0_reg_86 <= add_ln105_reg_182;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_0_reg_86 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_138 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        a_load_1_reg_172 <= a_q1;
        a_load_reg_162 <= a_q0;
        add_ln105_reg_182 <= add_ln105_fu_132_p2;
        res_load_1_reg_177 <= res_q1;
        res_load_reg_167 <= res_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_fu_102_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_addr_3_reg_157[5 : 1] <= zext_ln109_1_fu_126_p1[5 : 1];
        res_addr_reg_147 <= zext_ln109_fu_114_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_addr_3_reg_157_pp0_iter1_reg[5 : 1] <= res_addr_3_reg_157[5 : 1];
        res_addr_3_reg_157_pp0_iter2_reg[5 : 1] <= res_addr_3_reg_157_pp0_iter1_reg[5 : 1];
        res_addr_3_reg_157_pp0_iter3_reg[5 : 1] <= res_addr_3_reg_157_pp0_iter2_reg[5 : 1];
        res_addr_3_reg_157_pp0_iter4_reg[5 : 1] <= res_addr_3_reg_157_pp0_iter3_reg[5 : 1];
        res_addr_reg_147_pp0_iter1_reg <= res_addr_reg_147;
        res_addr_reg_147_pp0_iter2_reg <= res_addr_reg_147_pp0_iter1_reg;
        res_addr_reg_147_pp0_iter3_reg <= res_addr_reg_147_pp0_iter2_reg;
        tmp_2_reg_138 <= ap_phi_mux_i_0_0_phi_fu_90_p4[32'd6];
        tmp_2_reg_138_pp0_iter1_reg <= tmp_2_reg_138;
        tmp_2_reg_138_pp0_iter2_reg <= tmp_2_reg_138_pp0_iter1_reg;
        tmp_2_reg_138_pp0_iter3_reg <= tmp_2_reg_138_pp0_iter2_reg;
        tmp_2_reg_138_pp0_iter4_reg <= tmp_2_reg_138_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_138_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        tmp8_reg_187 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_138_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_1_reg_192 <= grp_fu_98_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_2_fu_102_p3 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_reg_138 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_0_phi_fu_90_p4 = add_ln105_reg_182;
    end else begin
        ap_phi_mux_i_0_0_phi_fu_90_p4 = i_0_0_reg_86;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_98_p0 = res_load_1_reg_177;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_98_p0 = res_load_reg_167;
        end else begin
            grp_fu_98_p0 = 'bx;
        end
    end else begin
        grp_fu_98_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_98_p1 = a_load_1_reg_172;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_98_p1 = a_load_reg_162;
        end else begin
            grp_fu_98_p1 = 'bx;
        end
    end else begin
        grp_fu_98_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_address0 = res_addr_reg_147_pp0_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_address0 = zext_ln109_fu_114_p1;
    end else begin
        res_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        res_address1 = res_addr_3_reg_157_pp0_iter4_reg;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        res_address1 = zext_ln109_1_fu_126_p1;
    end else begin
        res_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        res_ce1 = 1'b1;
    end else begin
        res_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_reg_138_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_reg_138_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        res_we1 = 1'b1;
    end else begin
        res_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_2_fu_102_p3 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((tmp_2_fu_102_p3 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln109_fu_114_p1;

assign a_address1 = zext_ln109_1_fu_126_p1;

assign add_ln105_fu_132_p2 = (7'd2 + i_0_0_reg_86);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign or_ln105_fu_120_p2 = (trunc_ln105_fu_110_p1 | 6'd1);

assign res_d0 = tmp8_reg_187;

assign res_d1 = tmp_1_reg_192;

assign tmp_2_fu_102_p3 = ap_phi_mux_i_0_0_phi_fu_90_p4[32'd6];

assign trunc_ln105_fu_110_p1 = ap_phi_mux_i_0_0_phi_fu_90_p4[5:0];

assign zext_ln109_1_fu_126_p1 = or_ln105_fu_120_p2;

assign zext_ln109_fu_114_p1 = ap_phi_mux_i_0_0_phi_fu_90_p4;

always @ (posedge ap_clk) begin
    res_addr_3_reg_157[0] <= 1'b1;
    res_addr_3_reg_157_pp0_iter1_reg[0] <= 1'b1;
    res_addr_3_reg_157_pp0_iter2_reg[0] <= 1'b1;
    res_addr_3_reg_157_pp0_iter3_reg[0] <= 1'b1;
    res_addr_3_reg_157_pp0_iter4_reg[0] <= 1'b1;
end

endmodule //geva_1
