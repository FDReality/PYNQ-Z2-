// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hprod (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_address1,
        res_ce1,
        res_we1,
        res_d1,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;
output  [5:0] res_address1;
output   res_ce1;
output   res_we1;
output  [31:0] res_d1;
output  [5:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [5:0] a_address1;
output   a_ce1;
input  [31:0] a_q1;
output  [5:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [5:0] b_address1;
output   b_ce1;
input  [31:0] b_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_ce0;
reg res_we0;
reg res_ce1;
reg res_we1;
reg a_ce0;
reg a_ce1;
reg b_ce0;
reg b_ce1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] i_0_0_reg_111;
wire   [0:0] icmp_ln120_fu_130_p2;
reg   [0:0] icmp_ln120_reg_164;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln120_reg_164_pp0_iter1_reg;
reg   [0:0] icmp_ln120_reg_164_pp0_iter2_reg;
reg   [0:0] icmp_ln120_reg_164_pp0_iter3_reg;
reg   [0:0] icmp_ln120_reg_164_pp0_iter4_reg;
reg   [0:0] icmp_ln120_reg_164_pp0_iter5_reg;
wire   [63:0] zext_ln124_fu_140_p1;
reg   [63:0] zext_ln124_reg_168;
reg   [63:0] zext_ln124_reg_168_pp0_iter1_reg;
reg   [63:0] zext_ln124_reg_168_pp0_iter2_reg;
reg   [63:0] zext_ln124_reg_168_pp0_iter3_reg;
reg   [63:0] zext_ln124_reg_168_pp0_iter4_reg;
reg   [63:0] zext_ln124_reg_168_pp0_iter5_reg;
wire   [63:0] zext_ln124_1_fu_152_p1;
reg   [63:0] zext_ln124_1_reg_183;
reg   [63:0] zext_ln124_1_reg_183_pp0_iter1_reg;
reg   [63:0] zext_ln124_1_reg_183_pp0_iter2_reg;
reg   [63:0] zext_ln124_1_reg_183_pp0_iter3_reg;
reg   [63:0] zext_ln124_1_reg_183_pp0_iter4_reg;
reg   [63:0] zext_ln124_1_reg_183_pp0_iter5_reg;
wire   [6:0] add_ln120_fu_158_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] a_load_reg_203;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] b_load_reg_208;
reg   [31:0] a_load_1_reg_213;
reg   [31:0] b_load_1_reg_218;
wire   [31:0] grp_fu_122_p2;
reg   [31:0] tmp7_reg_223;
wire   [31:0] grp_fu_126_p2;
reg   [31:0] tmp_1_reg_228;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_pp0_stage0;
wire   [5:0] empty_20_fu_136_p1;
wire   [5:0] or_ln120_fu_146_p2;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

LSTM_Top_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LSTM_Top_fmul_32ncud_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_load_reg_203),
    .din1(b_load_reg_208),
    .ce(1'b1),
    .dout(grp_fu_122_p2)
);

LSTM_Top_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
LSTM_Top_fmul_32ncud_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_load_1_reg_213),
    .din1(b_load_1_reg_218),
    .ce(1'b1),
    .dout(grp_fu_126_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln120_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_0_0_reg_111 <= add_ln120_fu_158_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_0_reg_111 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln120_reg_164 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        a_load_1_reg_213 <= a_q1;
        a_load_reg_203 <= a_q0;
        b_load_1_reg_218 <= b_q1;
        b_load_reg_208 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln120_reg_164 <= icmp_ln120_fu_130_p2;
        icmp_ln120_reg_164_pp0_iter1_reg <= icmp_ln120_reg_164;
        zext_ln124_1_reg_183_pp0_iter1_reg[5 : 1] <= zext_ln124_1_reg_183[5 : 1];
        zext_ln124_reg_168_pp0_iter1_reg[6 : 0] <= zext_ln124_reg_168[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln120_reg_164_pp0_iter2_reg <= icmp_ln120_reg_164_pp0_iter1_reg;
        icmp_ln120_reg_164_pp0_iter3_reg <= icmp_ln120_reg_164_pp0_iter2_reg;
        icmp_ln120_reg_164_pp0_iter4_reg <= icmp_ln120_reg_164_pp0_iter3_reg;
        icmp_ln120_reg_164_pp0_iter5_reg <= icmp_ln120_reg_164_pp0_iter4_reg;
        zext_ln124_1_reg_183_pp0_iter2_reg[5 : 1] <= zext_ln124_1_reg_183_pp0_iter1_reg[5 : 1];
        zext_ln124_1_reg_183_pp0_iter3_reg[5 : 1] <= zext_ln124_1_reg_183_pp0_iter2_reg[5 : 1];
        zext_ln124_1_reg_183_pp0_iter4_reg[5 : 1] <= zext_ln124_1_reg_183_pp0_iter3_reg[5 : 1];
        zext_ln124_1_reg_183_pp0_iter5_reg[5 : 1] <= zext_ln124_1_reg_183_pp0_iter4_reg[5 : 1];
        zext_ln124_reg_168_pp0_iter2_reg[6 : 0] <= zext_ln124_reg_168_pp0_iter1_reg[6 : 0];
        zext_ln124_reg_168_pp0_iter3_reg[6 : 0] <= zext_ln124_reg_168_pp0_iter2_reg[6 : 0];
        zext_ln124_reg_168_pp0_iter4_reg[6 : 0] <= zext_ln124_reg_168_pp0_iter3_reg[6 : 0];
        zext_ln124_reg_168_pp0_iter5_reg[6 : 0] <= zext_ln124_reg_168_pp0_iter4_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_reg_164_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp7_reg_223 <= grp_fu_122_p2;
        tmp_1_reg_228 <= grp_fu_126_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln120_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln124_1_reg_183[5 : 1] <= zext_ln124_1_fu_152_p1[5 : 1];
        zext_ln124_reg_168[6 : 0] <= zext_ln124_fu_140_p1[6 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln120_fu_130_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_ce1 = 1'b1;
    end else begin
        res_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_164_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln120_reg_164_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        res_we1 = 1'b1;
    end else begin
        res_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln120_fu_130_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln120_fu_130_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln124_fu_140_p1;

assign a_address1 = zext_ln124_1_fu_152_p1;

assign add_ln120_fu_158_p2 = (7'd2 + i_0_0_reg_111);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_address0 = zext_ln124_fu_140_p1;

assign b_address1 = zext_ln124_1_fu_152_p1;

assign empty_20_fu_136_p1 = i_0_0_reg_111[5:0];

assign icmp_ln120_fu_130_p2 = ((i_0_0_reg_111 == 7'd64) ? 1'b1 : 1'b0);

assign or_ln120_fu_146_p2 = (empty_20_fu_136_p1 | 6'd1);

assign res_address0 = zext_ln124_reg_168_pp0_iter5_reg;

assign res_address1 = zext_ln124_1_reg_183_pp0_iter5_reg;

assign res_d0 = tmp7_reg_223;

assign res_d1 = tmp_1_reg_228;

assign zext_ln124_1_fu_152_p1 = or_ln120_fu_146_p2;

assign zext_ln124_fu_140_p1 = i_0_0_reg_111;

always @ (posedge ap_clk) begin
    zext_ln124_reg_168[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln124_reg_168_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln124_reg_168_pp0_iter2_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln124_reg_168_pp0_iter3_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln124_reg_168_pp0_iter4_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln124_reg_168_pp0_iter5_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln124_1_reg_183[0] <= 1'b1;
    zext_ln124_1_reg_183[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln124_1_reg_183_pp0_iter1_reg[0] <= 1'b1;
    zext_ln124_1_reg_183_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln124_1_reg_183_pp0_iter2_reg[0] <= 1'b1;
    zext_ln124_1_reg_183_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln124_1_reg_183_pp0_iter3_reg[0] <= 1'b1;
    zext_ln124_1_reg_183_pp0_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln124_1_reg_183_pp0_iter4_reg[0] <= 1'b1;
    zext_ln124_1_reg_183_pp0_iter4_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln124_1_reg_183_pp0_iter5_reg[0] <= 1'b1;
    zext_ln124_1_reg_183_pp0_iter5_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //hprod
