-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity infer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    res_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    res_ce1 : OUT STD_LOGIC;
    res_we1 : OUT STD_LOGIC;
    res_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of infer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (48 downto 0) := "0000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (48 downto 0) := "0000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (48 downto 0) := "0000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (48 downto 0) := "0000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (48 downto 0) := "0000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (48 downto 0) := "0000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (48 downto 0) := "0001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (48 downto 0) := "0010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (48 downto 0) := "0100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (48 downto 0) := "1000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_1C : STD_LOGIC_VECTOR (6 downto 0) := "0011100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Weight0_f_ce0 : STD_LOGIC;
    signal Weight0_f_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Weight0_f_ce1 : STD_LOGIC;
    signal Weight0_f_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bias0_f_ce0 : STD_LOGIC;
    signal Bias0_f_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bias0_f_ce1 : STD_LOGIC;
    signal Bias0_f_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Weight0_i_ce0 : STD_LOGIC;
    signal Weight0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Weight0_i_ce1 : STD_LOGIC;
    signal Weight0_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bias0_i_ce0 : STD_LOGIC;
    signal Bias0_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bias0_i_ce1 : STD_LOGIC;
    signal Bias0_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Weight0_c_ce0 : STD_LOGIC;
    signal Weight0_c_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Weight0_c_ce1 : STD_LOGIC;
    signal Weight0_c_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bias0_c_ce0 : STD_LOGIC;
    signal Bias0_c_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bias0_c_ce1 : STD_LOGIC;
    signal Bias0_c_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Weight0_o_ce0 : STD_LOGIC;
    signal Weight0_o_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Weight0_o_ce1 : STD_LOGIC;
    signal Weight0_o_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bias0_o_ce0 : STD_LOGIC;
    signal Bias0_o_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bias0_o_ce1 : STD_LOGIC;
    signal Bias0_o_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bias_lc_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Bias_lc_ce0 : STD_LOGIC;
    signal Bias_lc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_0_i_reg_538 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln136_fu_729_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln137_fu_746_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln138_fu_763_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln139_fu_780_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln140_fu_797_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln141_fu_814_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_fu_837_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1022 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sub_ln174_fu_867_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln174_reg_1027 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln147_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_883_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1035 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln174_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_914_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_1048 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln175_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_reg_1058 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state47_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln105_reg_1058_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_reg_1058_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_reg_1058_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_reg_1058_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal res_addr_reg_1067 : STD_LOGIC_VECTOR (2 downto 0);
    signal res_addr_reg_1067_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal res_addr_reg_1067_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal res_addr_reg_1067_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln105_1_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_1_reg_1072 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_1_reg_1072_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_1_reg_1072_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_1_reg_1072_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_1_reg_1072_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln109_1_fu_960_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_1_reg_1076 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_addr_2_reg_1081 : STD_LOGIC_VECTOR (2 downto 0);
    signal res_addr_2_reg_1081_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal res_addr_2_reg_1081_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal res_addr_2_reg_1081_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal res_addr_2_reg_1081_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal Bias_lc_load_reg_1086 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state48_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state50_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state52_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state54_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state56_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal res_load_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_load_1_reg_1101 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln105_fu_965_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln105_reg_1106 : STD_LOGIC_VECTOR (2 downto 0);
    signal Bias_lc_load_1_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_fu_725_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_i_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_1_i_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_gemvm1_fu_573_ap_ready : STD_LOGIC;
    signal grp_gemvm1_fu_573_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_predicate_tran54to57_state48 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter3_state54 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal gate_f_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal gate_f_ce0 : STD_LOGIC;
    signal gate_f_we0 : STD_LOGIC;
    signal gate_f_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gate_f_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gate_f_ce1 : STD_LOGIC;
    signal gate_f_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gate_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal gate_i_ce0 : STD_LOGIC;
    signal gate_i_we0 : STD_LOGIC;
    signal gate_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gate_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gate_i_ce1 : STD_LOGIC;
    signal gate_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal stat_C_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal stat_C_ce0 : STD_LOGIC;
    signal stat_C_we0 : STD_LOGIC;
    signal stat_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal stat_C_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal stat_C_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal stat_C_ce1 : STD_LOGIC;
    signal stat_C_we1 : STD_LOGIC;
    signal stat_C_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_t_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_t_ce0 : STD_LOGIC;
    signal C_t_we0 : STD_LOGIC;
    signal C_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_t_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_t_ce1 : STD_LOGIC;
    signal C_t_we1 : STD_LOGIC;
    signal C_t_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal gate_o_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal gate_o_ce0 : STD_LOGIC;
    signal gate_o_we0 : STD_LOGIC;
    signal gate_o_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gate_o_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gate_o_ce1 : STD_LOGIC;
    signal gate_o_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_t_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_t_ce0 : STD_LOGIC;
    signal h_t_we0 : STD_LOGIC;
    signal h_t_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_t_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal h_t_ce1 : STD_LOGIC;
    signal h_t_we1 : STD_LOGIC;
    signal h_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_i_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal vec_i_ce0 : STD_LOGIC;
    signal vec_i_we0 : STD_LOGIC;
    signal vec_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_i_ce1 : STD_LOGIC;
    signal vec_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_tmp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal vec_tmp_ce0 : STD_LOGIC;
    signal vec_tmp_we0 : STD_LOGIC;
    signal vec_tmp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_tmp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_tmp_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal vec_tmp_ce1 : STD_LOGIC;
    signal vec_tmp_we1 : STD_LOGIC;
    signal vec_tmp_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal vec_tmp_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tanh_fu_550_ap_start : STD_LOGIC;
    signal grp_tanh_fu_550_ap_done : STD_LOGIC;
    signal grp_tanh_fu_550_ap_idle : STD_LOGIC;
    signal grp_tanh_fu_550_ap_ready : STD_LOGIC;
    signal grp_tanh_fu_550_res_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_tanh_fu_550_res_ce0 : STD_LOGIC;
    signal grp_tanh_fu_550_res_we0 : STD_LOGIC;
    signal grp_tanh_fu_550_res_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tanh_fu_550_res_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_tanh_fu_550_res_ce1 : STD_LOGIC;
    signal grp_tanh_fu_550_res_we1 : STD_LOGIC;
    signal grp_tanh_fu_550_res_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tanh_fu_550_a_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_tanh_fu_550_a_ce0 : STD_LOGIC;
    signal grp_tanh_fu_550_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_tanh_fu_550_a_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_tanh_fu_550_a_ce1 : STD_LOGIC;
    signal grp_tanh_fu_550_a_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sigmoid_fu_556_ap_start : STD_LOGIC;
    signal grp_sigmoid_fu_556_ap_done : STD_LOGIC;
    signal grp_sigmoid_fu_556_ap_idle : STD_LOGIC;
    signal grp_sigmoid_fu_556_ap_ready : STD_LOGIC;
    signal grp_sigmoid_fu_556_res_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sigmoid_fu_556_res_ce0 : STD_LOGIC;
    signal grp_sigmoid_fu_556_res_we0 : STD_LOGIC;
    signal grp_sigmoid_fu_556_res_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sigmoid_fu_556_a_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sigmoid_fu_556_a_ce0 : STD_LOGIC;
    signal grp_gemvm_fu_562_ap_start : STD_LOGIC;
    signal grp_gemvm_fu_562_ap_done : STD_LOGIC;
    signal grp_gemvm_fu_562_ap_idle : STD_LOGIC;
    signal grp_gemvm_fu_562_ap_ready : STD_LOGIC;
    signal grp_gemvm_fu_562_res_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_gemvm_fu_562_res_ce0 : STD_LOGIC;
    signal grp_gemvm_fu_562_res_we0 : STD_LOGIC;
    signal grp_gemvm_fu_562_res_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gemvm_fu_562_a_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_gemvm_fu_562_a_ce0 : STD_LOGIC;
    signal grp_gemvm_fu_562_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gemvm_fu_562_a_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_gemvm_fu_562_a_ce1 : STD_LOGIC;
    signal grp_gemvm_fu_562_a_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gemvm_fu_562_b_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_gemvm_fu_562_b_ce0 : STD_LOGIC;
    signal grp_gemvm_fu_562_b_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_gemvm_fu_562_b_ce1 : STD_LOGIC;
    signal grp_gemvm1_fu_573_ap_start : STD_LOGIC;
    signal grp_gemvm1_fu_573_ap_idle : STD_LOGIC;
    signal grp_gemvm1_fu_573_res_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_gemvm1_fu_573_res_ce0 : STD_LOGIC;
    signal grp_gemvm1_fu_573_res_we0 : STD_LOGIC;
    signal grp_gemvm1_fu_573_res_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gemvm1_fu_573_b_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_gemvm1_fu_573_b_ce0 : STD_LOGIC;
    signal grp_gemvm1_fu_573_b_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_gemvm1_fu_573_b_ce1 : STD_LOGIC;
    signal grp_hprod_fu_708_ap_start : STD_LOGIC;
    signal grp_hprod_fu_708_ap_done : STD_LOGIC;
    signal grp_hprod_fu_708_ap_idle : STD_LOGIC;
    signal grp_hprod_fu_708_ap_ready : STD_LOGIC;
    signal grp_hprod_fu_708_res_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_hprod_fu_708_res_ce0 : STD_LOGIC;
    signal grp_hprod_fu_708_res_we0 : STD_LOGIC;
    signal grp_hprod_fu_708_res_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hprod_fu_708_res_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_hprod_fu_708_res_ce1 : STD_LOGIC;
    signal grp_hprod_fu_708_res_we1 : STD_LOGIC;
    signal grp_hprod_fu_708_res_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hprod_fu_708_a_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_hprod_fu_708_a_ce0 : STD_LOGIC;
    signal grp_hprod_fu_708_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hprod_fu_708_a_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_hprod_fu_708_a_ce1 : STD_LOGIC;
    signal grp_hprod_fu_708_a_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hprod_fu_708_b_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_hprod_fu_708_b_ce0 : STD_LOGIC;
    signal grp_hprod_fu_708_b_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_hprod_fu_708_b_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_hprod_fu_708_b_ce1 : STD_LOGIC;
    signal grp_hprod_fu_708_b_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_geva_1_fu_715_ap_start : STD_LOGIC;
    signal grp_geva_1_fu_715_ap_done : STD_LOGIC;
    signal grp_geva_1_fu_715_ap_idle : STD_LOGIC;
    signal grp_geva_1_fu_715_ap_ready : STD_LOGIC;
    signal grp_geva_1_fu_715_res_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_geva_1_fu_715_res_ce0 : STD_LOGIC;
    signal grp_geva_1_fu_715_res_we0 : STD_LOGIC;
    signal grp_geva_1_fu_715_res_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_geva_1_fu_715_res_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_geva_1_fu_715_res_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_geva_1_fu_715_res_ce1 : STD_LOGIC;
    signal grp_geva_1_fu_715_res_we1 : STD_LOGIC;
    signal grp_geva_1_fu_715_res_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_geva_1_fu_715_res_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_geva_1_fu_715_a_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_geva_1_fu_715_a_ce0 : STD_LOGIC;
    signal grp_geva_1_fu_715_a_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_geva_1_fu_715_a_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_geva_1_fu_715_a_ce1 : STD_LOGIC;
    signal grp_geva_1_fu_715_a_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln136_reg_437 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln136_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln137_reg_448 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln137_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln138_reg_459 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln138_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln139_reg_470 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln139_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln140_reg_481 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln140_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln141_reg_492 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln141_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_503 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal j_0_reg_514 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j1_0_reg_526 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_phi_mux_i_0_0_i_phi_fu_542_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_tanh_fu_550_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_sigmoid_fu_556_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_gemvm_fu_562_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_gemvm1_fu_573_ap_start_reg : STD_LOGIC := '0';
    signal grp_hprod_fu_708_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_geva_1_fu_715_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal zext_ln136_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln138_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln140_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln141_fu_820_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_fu_898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_1_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_fu_920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln175_1_fu_931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_725_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_725_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_843_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln174_1_fu_855_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln174_2_fu_851_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln174_3_fu_863_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln174_4_fu_873_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln174_fu_889_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln174_fu_894_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln175_fu_925_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln105_fu_948_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component tanh IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        res_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_ce0 : OUT STD_LOGIC;
        res_we0 : OUT STD_LOGIC;
        res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_ce1 : OUT STD_LOGIC;
        res_we1 : OUT STD_LOGIC;
        res_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sigmoid IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        res_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_ce0 : OUT STD_LOGIC;
        res_we0 : OUT STD_LOGIC;
        res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gemvm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        res_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_ce0 : OUT STD_LOGIC;
        res_we0 : OUT STD_LOGIC;
        res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        b_ce1 : OUT STD_LOGIC;
        b_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gemvm1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        res_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        res_ce0 : OUT STD_LOGIC;
        res_we0 : OUT STD_LOGIC;
        res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_ce1 : OUT STD_LOGIC;
        b_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component hprod IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        res_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_ce0 : OUT STD_LOGIC;
        res_we0 : OUT STD_LOGIC;
        res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_ce1 : OUT STD_LOGIC;
        res_we1 : OUT STD_LOGIC;
        res_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        b_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        b_ce1 : OUT STD_LOGIC;
        b_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component geva_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        res_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_ce0 : OUT STD_LOGIC;
        res_we0 : OUT STD_LOGIC;
        res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        res_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        res_ce1 : OUT STD_LOGIC;
        res_we1 : OUT STD_LOGIC;
        res_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        res_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        a_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        a_ce1 : OUT STD_LOGIC;
        a_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component LSTM_Top_fadd_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_Weight0_f IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_Bias0_f IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_Weight0_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_Bias0_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_Weight0_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_Bias0_c IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_Weight0_o IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_Bias0_o IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_Bias_lc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_gate_f IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_stat_C IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component infer_vec_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Weight0_f_U : component infer_Weight0_f
    generic map (
        DataWidth => 32,
        AddressRange => 5888,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_gemvm_fu_562_a_address0,
        ce0 => Weight0_f_ce0,
        q0 => Weight0_f_q0,
        address1 => grp_gemvm_fu_562_a_address1,
        ce1 => Weight0_f_ce1,
        q1 => Weight0_f_q1);

    Bias0_f_U : component infer_Bias0_f
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_geva_1_fu_715_a_address0,
        ce0 => Bias0_f_ce0,
        q0 => Bias0_f_q0,
        address1 => grp_geva_1_fu_715_a_address1,
        ce1 => Bias0_f_ce1,
        q1 => Bias0_f_q1);

    Weight0_i_U : component infer_Weight0_i
    generic map (
        DataWidth => 32,
        AddressRange => 5888,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_gemvm_fu_562_a_address0,
        ce0 => Weight0_i_ce0,
        q0 => Weight0_i_q0,
        address1 => grp_gemvm_fu_562_a_address1,
        ce1 => Weight0_i_ce1,
        q1 => Weight0_i_q1);

    Bias0_i_U : component infer_Bias0_i
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_geva_1_fu_715_a_address0,
        ce0 => Bias0_i_ce0,
        q0 => Bias0_i_q0,
        address1 => grp_geva_1_fu_715_a_address1,
        ce1 => Bias0_i_ce1,
        q1 => Bias0_i_q1);

    Weight0_c_U : component infer_Weight0_c
    generic map (
        DataWidth => 32,
        AddressRange => 5888,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_gemvm_fu_562_a_address0,
        ce0 => Weight0_c_ce0,
        q0 => Weight0_c_q0,
        address1 => grp_gemvm_fu_562_a_address1,
        ce1 => Weight0_c_ce1,
        q1 => Weight0_c_q1);

    Bias0_c_U : component infer_Bias0_c
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_geva_1_fu_715_a_address0,
        ce0 => Bias0_c_ce0,
        q0 => Bias0_c_q0,
        address1 => grp_geva_1_fu_715_a_address1,
        ce1 => Bias0_c_ce1,
        q1 => Bias0_c_q1);

    Weight0_o_U : component infer_Weight0_o
    generic map (
        DataWidth => 32,
        AddressRange => 5888,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_gemvm_fu_562_a_address0,
        ce0 => Weight0_o_ce0,
        q0 => Weight0_o_q0,
        address1 => grp_gemvm_fu_562_a_address1,
        ce1 => Weight0_o_ce1,
        q1 => Weight0_o_q1);

    Bias0_o_U : component infer_Bias0_o
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_geva_1_fu_715_a_address0,
        ce0 => Bias0_o_ce0,
        q0 => Bias0_o_q0,
        address1 => grp_geva_1_fu_715_a_address1,
        ce1 => Bias0_o_ce1,
        q1 => Bias0_o_q1);

    Bias_lc_U : component infer_Bias_lc
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Bias_lc_address0,
        ce0 => Bias_lc_ce0,
        q0 => Bias_lc_q0);

    gate_f_U : component infer_gate_f
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gate_f_address0,
        ce0 => gate_f_ce0,
        we0 => gate_f_we0,
        d0 => gate_f_d0,
        q0 => gate_f_q0,
        address1 => grp_hprod_fu_708_a_address1,
        ce1 => gate_f_ce1,
        q1 => gate_f_q1);

    gate_i_U : component infer_gate_f
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gate_i_address0,
        ce0 => gate_i_ce0,
        we0 => gate_i_we0,
        d0 => gate_i_d0,
        q0 => gate_i_q0,
        address1 => grp_hprod_fu_708_a_address1,
        ce1 => gate_i_ce1,
        q1 => gate_i_q1);

    stat_C_U : component infer_stat_C
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stat_C_address0,
        ce0 => stat_C_ce0,
        we0 => stat_C_we0,
        d0 => stat_C_d0,
        q0 => stat_C_q0,
        address1 => stat_C_address1,
        ce1 => stat_C_ce1,
        we1 => stat_C_we1,
        d1 => grp_tanh_fu_550_res_d1,
        q1 => stat_C_q1);

    C_t_U : component infer_stat_C
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C_t_address0,
        ce0 => C_t_ce0,
        we0 => C_t_we0,
        d0 => C_t_d0,
        q0 => C_t_q0,
        address1 => C_t_address1,
        ce1 => C_t_ce1,
        we1 => C_t_we1,
        d1 => C_t_d1,
        q1 => C_t_q1);

    gate_o_U : component infer_gate_f
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gate_o_address0,
        ce0 => gate_o_ce0,
        we0 => gate_o_we0,
        d0 => gate_o_d0,
        q0 => gate_o_q0,
        address1 => grp_hprod_fu_708_a_address1,
        ce1 => gate_o_ce1,
        q1 => gate_o_q1);

    h_t_U : component infer_stat_C
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_t_address0,
        ce0 => h_t_ce0,
        we0 => h_t_we0,
        d0 => h_t_d0,
        q0 => h_t_q0,
        address1 => h_t_address1,
        ce1 => h_t_ce1,
        we1 => h_t_we1,
        d1 => grp_hprod_fu_708_res_d1,
        q1 => h_t_q1);

    vec_i_U : component infer_vec_i
    generic map (
        DataWidth => 32,
        AddressRange => 92,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vec_i_address0,
        ce0 => vec_i_ce0,
        we0 => vec_i_we0,
        d0 => vec_i_d0,
        q0 => vec_i_q0,
        address1 => grp_gemvm_fu_562_b_address1,
        ce1 => vec_i_ce1,
        q1 => vec_i_q1);

    vec_tmp_U : component infer_stat_C
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => vec_tmp_address0,
        ce0 => vec_tmp_ce0,
        we0 => vec_tmp_we0,
        d0 => vec_tmp_d0,
        q0 => vec_tmp_q0,
        address1 => vec_tmp_address1,
        ce1 => vec_tmp_ce1,
        we1 => vec_tmp_we1,
        d1 => vec_tmp_d1,
        q1 => vec_tmp_q1);

    grp_tanh_fu_550 : component tanh
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tanh_fu_550_ap_start,
        ap_done => grp_tanh_fu_550_ap_done,
        ap_idle => grp_tanh_fu_550_ap_idle,
        ap_ready => grp_tanh_fu_550_ap_ready,
        res_address0 => grp_tanh_fu_550_res_address0,
        res_ce0 => grp_tanh_fu_550_res_ce0,
        res_we0 => grp_tanh_fu_550_res_we0,
        res_d0 => grp_tanh_fu_550_res_d0,
        res_address1 => grp_tanh_fu_550_res_address1,
        res_ce1 => grp_tanh_fu_550_res_ce1,
        res_we1 => grp_tanh_fu_550_res_we1,
        res_d1 => grp_tanh_fu_550_res_d1,
        a_address0 => grp_tanh_fu_550_a_address0,
        a_ce0 => grp_tanh_fu_550_a_ce0,
        a_q0 => grp_tanh_fu_550_a_q0,
        a_address1 => grp_tanh_fu_550_a_address1,
        a_ce1 => grp_tanh_fu_550_a_ce1,
        a_q1 => grp_tanh_fu_550_a_q1);

    grp_sigmoid_fu_556 : component sigmoid
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sigmoid_fu_556_ap_start,
        ap_done => grp_sigmoid_fu_556_ap_done,
        ap_idle => grp_sigmoid_fu_556_ap_idle,
        ap_ready => grp_sigmoid_fu_556_ap_ready,
        res_address0 => grp_sigmoid_fu_556_res_address0,
        res_ce0 => grp_sigmoid_fu_556_res_ce0,
        res_we0 => grp_sigmoid_fu_556_res_we0,
        res_d0 => grp_sigmoid_fu_556_res_d0,
        a_address0 => grp_sigmoid_fu_556_a_address0,
        a_ce0 => grp_sigmoid_fu_556_a_ce0,
        a_q0 => vec_tmp_q0);

    grp_gemvm_fu_562 : component gemvm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gemvm_fu_562_ap_start,
        ap_done => grp_gemvm_fu_562_ap_done,
        ap_idle => grp_gemvm_fu_562_ap_idle,
        ap_ready => grp_gemvm_fu_562_ap_ready,
        res_address0 => grp_gemvm_fu_562_res_address0,
        res_ce0 => grp_gemvm_fu_562_res_ce0,
        res_we0 => grp_gemvm_fu_562_res_we0,
        res_d0 => grp_gemvm_fu_562_res_d0,
        res_q0 => vec_tmp_q0,
        a_address0 => grp_gemvm_fu_562_a_address0,
        a_ce0 => grp_gemvm_fu_562_a_ce0,
        a_q0 => grp_gemvm_fu_562_a_q0,
        a_address1 => grp_gemvm_fu_562_a_address1,
        a_ce1 => grp_gemvm_fu_562_a_ce1,
        a_q1 => grp_gemvm_fu_562_a_q1,
        b_address0 => grp_gemvm_fu_562_b_address0,
        b_ce0 => grp_gemvm_fu_562_b_ce0,
        b_q0 => vec_i_q0,
        b_address1 => grp_gemvm_fu_562_b_address1,
        b_ce1 => grp_gemvm_fu_562_b_ce1,
        b_q1 => vec_i_q1);

    grp_gemvm1_fu_573 : component gemvm1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gemvm1_fu_573_ap_start,
        ap_done => grp_gemvm1_fu_573_ap_done,
        ap_idle => grp_gemvm1_fu_573_ap_idle,
        ap_ready => grp_gemvm1_fu_573_ap_ready,
        res_address0 => grp_gemvm1_fu_573_res_address0,
        res_ce0 => grp_gemvm1_fu_573_res_ce0,
        res_we0 => grp_gemvm1_fu_573_res_we0,
        res_d0 => grp_gemvm1_fu_573_res_d0,
        res_q0 => res_q0,
        b_address0 => grp_gemvm1_fu_573_b_address0,
        b_ce0 => grp_gemvm1_fu_573_b_ce0,
        b_q0 => h_t_q0,
        b_address1 => grp_gemvm1_fu_573_b_address1,
        b_ce1 => grp_gemvm1_fu_573_b_ce1,
        b_q1 => h_t_q1);

    grp_hprod_fu_708 : component hprod
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_hprod_fu_708_ap_start,
        ap_done => grp_hprod_fu_708_ap_done,
        ap_idle => grp_hprod_fu_708_ap_idle,
        ap_ready => grp_hprod_fu_708_ap_ready,
        res_address0 => grp_hprod_fu_708_res_address0,
        res_ce0 => grp_hprod_fu_708_res_ce0,
        res_we0 => grp_hprod_fu_708_res_we0,
        res_d0 => grp_hprod_fu_708_res_d0,
        res_address1 => grp_hprod_fu_708_res_address1,
        res_ce1 => grp_hprod_fu_708_res_ce1,
        res_we1 => grp_hprod_fu_708_res_we1,
        res_d1 => grp_hprod_fu_708_res_d1,
        a_address0 => grp_hprod_fu_708_a_address0,
        a_ce0 => grp_hprod_fu_708_a_ce0,
        a_q0 => grp_hprod_fu_708_a_q0,
        a_address1 => grp_hprod_fu_708_a_address1,
        a_ce1 => grp_hprod_fu_708_a_ce1,
        a_q1 => grp_hprod_fu_708_a_q1,
        b_address0 => grp_hprod_fu_708_b_address0,
        b_ce0 => grp_hprod_fu_708_b_ce0,
        b_q0 => grp_hprod_fu_708_b_q0,
        b_address1 => grp_hprod_fu_708_b_address1,
        b_ce1 => grp_hprod_fu_708_b_ce1,
        b_q1 => grp_hprod_fu_708_b_q1);

    grp_geva_1_fu_715 : component geva_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_geva_1_fu_715_ap_start,
        ap_done => grp_geva_1_fu_715_ap_done,
        ap_idle => grp_geva_1_fu_715_ap_idle,
        ap_ready => grp_geva_1_fu_715_ap_ready,
        res_address0 => grp_geva_1_fu_715_res_address0,
        res_ce0 => grp_geva_1_fu_715_res_ce0,
        res_we0 => grp_geva_1_fu_715_res_we0,
        res_d0 => grp_geva_1_fu_715_res_d0,
        res_q0 => grp_geva_1_fu_715_res_q0,
        res_address1 => grp_geva_1_fu_715_res_address1,
        res_ce1 => grp_geva_1_fu_715_res_ce1,
        res_we1 => grp_geva_1_fu_715_res_we1,
        res_d1 => grp_geva_1_fu_715_res_d1,
        res_q1 => grp_geva_1_fu_715_res_q1,
        a_address0 => grp_geva_1_fu_715_a_address0,
        a_ce0 => grp_geva_1_fu_715_a_ce0,
        a_q0 => grp_geva_1_fu_715_a_q0,
        a_address1 => grp_geva_1_fu_715_a_address1,
        a_ce1 => grp_geva_1_fu_715_a_ce1,
        a_q1 => grp_geva_1_fu_715_a_q1);

    LSTM_Top_fadd_32nbkb_U119 : component LSTM_Top_fadd_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_725_p0,
        din1 => grp_fu_725_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_725_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_predicate_tran54to57_state48 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_gemvm1_fu_573_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((((grp_gemvm1_fu_573_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter3_state54) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter3_state54) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((grp_gemvm1_fu_573_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gemvm1_fu_573_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gemvm1_fu_573_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln147_fu_831_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    grp_gemvm1_fu_573_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gemvm1_fu_573_ap_ready = ap_const_logic_1)) then 
                    grp_gemvm1_fu_573_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gemvm_fu_562_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gemvm_fu_562_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln175_fu_908_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
                    grp_gemvm_fu_562_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gemvm_fu_562_ap_ready = ap_const_logic_1)) then 
                    grp_gemvm_fu_562_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_geva_1_fu_715_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_geva_1_fu_715_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    grp_geva_1_fu_715_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_geva_1_fu_715_ap_ready = ap_const_logic_1)) then 
                    grp_geva_1_fu_715_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_hprod_fu_708_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_hprod_fu_708_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                    grp_hprod_fu_708_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_hprod_fu_708_ap_ready = ap_const_logic_1)) then 
                    grp_hprod_fu_708_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sigmoid_fu_556_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sigmoid_fu_556_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                    grp_sigmoid_fu_556_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sigmoid_fu_556_ap_ready = ap_const_logic_1)) then 
                    grp_sigmoid_fu_556_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_tanh_fu_550_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_tanh_fu_550_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                    grp_tanh_fu_550_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_tanh_fu_550_ap_ready = ap_const_logic_1)) then 
                    grp_tanh_fu_550_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_0_i_reg_538_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln105_1_reg_1072 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln105_reg_1058 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_0_i_reg_538 <= add_ln105_reg_1106;
            elsif (((grp_gemvm1_fu_573_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                i_0_0_i_reg_538 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_503_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln141_fu_825_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_0_reg_503 <= ap_const_lv5_0;
            elsif (((grp_hprod_fu_708_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                i_0_reg_503 <= i_reg_1022;
            end if; 
        end if;
    end process;

    j1_0_reg_526_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln174_fu_877_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j1_0_reg_526 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j1_0_reg_526 <= j_1_reg_1048;
            end if; 
        end if;
    end process;

    j_0_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln147_fu_831_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                j_0_reg_514 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_0_reg_514 <= j_reg_1035;
            end if; 
        end if;
    end process;

    phi_ln136_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln136_fu_740_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln136_reg_437 <= add_ln136_fu_729_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln136_reg_437 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_ln137_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln136_fu_740_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln137_reg_448 <= ap_const_lv6_0;
            elsif (((icmp_ln137_fu_757_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln137_reg_448 <= add_ln137_fu_746_p2;
            end if; 
        end if;
    end process;

    phi_ln138_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln137_fu_757_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln138_reg_459 <= ap_const_lv6_0;
            elsif (((icmp_ln138_fu_774_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln138_reg_459 <= add_ln138_fu_763_p2;
            end if; 
        end if;
    end process;

    phi_ln139_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln138_fu_774_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_ln139_reg_470 <= ap_const_lv6_0;
            elsif (((icmp_ln139_fu_791_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln139_reg_470 <= add_ln139_fu_780_p2;
            end if; 
        end if;
    end process;

    phi_ln140_reg_481_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln139_fu_791_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln140_reg_481 <= ap_const_lv6_0;
            elsif (((icmp_ln140_fu_808_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_ln140_reg_481 <= add_ln140_fu_797_p2;
            end if; 
        end if;
    end process;

    phi_ln141_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_808_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_ln141_reg_492 <= ap_const_lv6_0;
            elsif (((icmp_ln141_fu_825_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_ln141_reg_492 <= add_ln141_fu_814_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln105_1_reg_1072 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln105_reg_1058 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Bias_lc_load_1_reg_1111 <= Bias_lc_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln105_reg_1058 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                Bias_lc_load_reg_1086 <= Bias_lc_q0;
                res_load_reg_1091 <= res_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln105_1_reg_1072 = ap_const_lv1_1) and (icmp_ln105_reg_1058 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln105_reg_1106 <= add_ln105_fu_965_p2;
                res_load_1_reg_1101 <= res_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_reg_1022 <= i_fu_837_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln105_fu_936_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln105_1_reg_1072 <= icmp_ln105_1_fu_954_p2;
                res_addr_reg_1067 <= zext_ln109_fu_942_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln105_1_reg_1072_pp0_iter1_reg <= icmp_ln105_1_reg_1072;
                icmp_ln105_1_reg_1072_pp0_iter2_reg <= icmp_ln105_1_reg_1072_pp0_iter1_reg;
                icmp_ln105_1_reg_1072_pp0_iter3_reg <= icmp_ln105_1_reg_1072_pp0_iter2_reg;
                icmp_ln105_1_reg_1072_pp0_iter4_reg <= icmp_ln105_1_reg_1072_pp0_iter3_reg;
                icmp_ln105_reg_1058 <= icmp_ln105_fu_936_p2;
                icmp_ln105_reg_1058_pp0_iter1_reg <= icmp_ln105_reg_1058;
                icmp_ln105_reg_1058_pp0_iter2_reg <= icmp_ln105_reg_1058_pp0_iter1_reg;
                icmp_ln105_reg_1058_pp0_iter3_reg <= icmp_ln105_reg_1058_pp0_iter2_reg;
                icmp_ln105_reg_1058_pp0_iter4_reg <= icmp_ln105_reg_1058_pp0_iter3_reg;
                    res_addr_2_reg_1081_pp0_iter1_reg(2 downto 1) <= res_addr_2_reg_1081(2 downto 1);
                    res_addr_2_reg_1081_pp0_iter2_reg(2 downto 1) <= res_addr_2_reg_1081_pp0_iter1_reg(2 downto 1);
                    res_addr_2_reg_1081_pp0_iter3_reg(2 downto 1) <= res_addr_2_reg_1081_pp0_iter2_reg(2 downto 1);
                    res_addr_2_reg_1081_pp0_iter4_reg(2 downto 1) <= res_addr_2_reg_1081_pp0_iter3_reg(2 downto 1);
                res_addr_reg_1067_pp0_iter1_reg <= res_addr_reg_1067;
                res_addr_reg_1067_pp0_iter2_reg <= res_addr_reg_1067_pp0_iter1_reg;
                res_addr_reg_1067_pp0_iter3_reg <= res_addr_reg_1067_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_1_reg_1048 <= j_1_fu_914_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_reg_1035 <= j_fu_883_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln105_1_fu_954_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln105_fu_936_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    res_addr_2_reg_1081(2 downto 1) <= zext_ln109_1_fu_960_p1(3 - 1 downto 0)(2 downto 1);
                    zext_ln109_1_reg_1076(2 downto 1) <= zext_ln109_1_fu_960_p1(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln147_fu_831_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    sub_ln174_reg_1027(10 downto 2) <= sub_ln174_fu_867_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln105_reg_1058_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp9_i_reg_1116 <= grp_fu_725_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln105_1_reg_1072_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln105_reg_1058_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_1_i_reg_1121 <= grp_fu_725_p2;
            end if;
        end if;
    end process;
    sub_ln174_reg_1027(1 downto 0) <= "00";
    zext_ln109_1_reg_1076(0) <= '1';
    zext_ln109_1_reg_1076(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    res_addr_2_reg_1081(0) <= '1';
    res_addr_2_reg_1081_pp0_iter1_reg(0) <= '1';
    res_addr_2_reg_1081_pp0_iter2_reg(0) <= '1';
    res_addr_2_reg_1081_pp0_iter3_reg(0) <= '1';
    res_addr_2_reg_1081_pp0_iter4_reg(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, icmp_ln147_fu_831_p2, ap_CS_fsm_state9, icmp_ln174_fu_877_p2, ap_CS_fsm_state11, icmp_ln175_fu_908_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter3, ap_CS_fsm_state46, grp_gemvm1_fu_573_ap_done, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter2, grp_tanh_fu_550_ap_done, grp_sigmoid_fu_556_ap_done, grp_gemvm_fu_562_ap_done, grp_hprod_fu_708_ap_done, grp_geva_1_fu_715_ap_done, icmp_ln136_fu_740_p2, icmp_ln137_fu_757_p2, icmp_ln138_fu_774_p2, icmp_ln139_fu_791_p2, icmp_ln140_fu_808_p2, icmp_ln141_fu_825_p2, ap_CS_fsm_state45, ap_CS_fsm_state29, ap_CS_fsm_state43, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state35, ap_CS_fsm_state13, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state41, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln136_fu_740_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln137_fu_757_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln138_fu_774_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln139_fu_791_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln140_fu_808_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln141_fu_825_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln147_fu_831_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln174_fu_877_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln175_fu_908_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((grp_gemvm_fu_562_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_geva_1_fu_715_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_sigmoid_fu_556_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_gemvm_fu_562_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_geva_1_fu_715_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((grp_sigmoid_fu_556_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_gemvm_fu_562_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_geva_1_fu_715_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((grp_tanh_fu_550_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((grp_gemvm_fu_562_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((grp_geva_1_fu_715_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((grp_sigmoid_fu_556_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((grp_hprod_fu_708_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((grp_hprod_fu_708_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((grp_geva_1_fu_715_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((grp_tanh_fu_550_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((grp_hprod_fu_708_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                if (((grp_gemvm1_fu_573_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Bias0_c_ce0_assign_proc : process(grp_geva_1_fu_715_a_ce0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            Bias0_c_ce0 <= grp_geva_1_fu_715_a_ce0;
        else 
            Bias0_c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Bias0_c_ce1_assign_proc : process(grp_geva_1_fu_715_a_ce1, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            Bias0_c_ce1 <= grp_geva_1_fu_715_a_ce1;
        else 
            Bias0_c_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Bias0_f_ce0_assign_proc : process(grp_geva_1_fu_715_a_ce0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            Bias0_f_ce0 <= grp_geva_1_fu_715_a_ce0;
        else 
            Bias0_f_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Bias0_f_ce1_assign_proc : process(grp_geva_1_fu_715_a_ce1, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            Bias0_f_ce1 <= grp_geva_1_fu_715_a_ce1;
        else 
            Bias0_f_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Bias0_i_ce0_assign_proc : process(grp_geva_1_fu_715_a_ce0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Bias0_i_ce0 <= grp_geva_1_fu_715_a_ce0;
        else 
            Bias0_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Bias0_i_ce1_assign_proc : process(grp_geva_1_fu_715_a_ce1, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Bias0_i_ce1 <= grp_geva_1_fu_715_a_ce1;
        else 
            Bias0_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Bias0_o_ce0_assign_proc : process(grp_geva_1_fu_715_a_ce0, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            Bias0_o_ce0 <= grp_geva_1_fu_715_a_ce0;
        else 
            Bias0_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Bias0_o_ce1_assign_proc : process(grp_geva_1_fu_715_a_ce1, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            Bias0_o_ce1 <= grp_geva_1_fu_715_a_ce1;
        else 
            Bias0_o_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Bias_lc_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln109_1_reg_1076, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln109_fu_942_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                Bias_lc_address0 <= zext_ln109_1_reg_1076(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Bias_lc_address0 <= zext_ln109_fu_942_p1(3 - 1 downto 0);
            else 
                Bias_lc_address0 <= "XXX";
            end if;
        else 
            Bias_lc_address0 <= "XXX";
        end if; 
    end process;


    Bias_lc_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            Bias_lc_ce0 <= ap_const_logic_1;
        else 
            Bias_lc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_t_address0_assign_proc : process(ap_CS_fsm_state5, grp_tanh_fu_550_a_address0, grp_hprod_fu_708_res_address0, grp_hprod_fu_708_b_address0, grp_geva_1_fu_715_res_address0, ap_CS_fsm_state43, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41, zext_ln139_fu_786_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            C_t_address0 <= zext_ln139_fu_786_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            C_t_address0 <= grp_geva_1_fu_715_res_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            C_t_address0 <= grp_hprod_fu_708_b_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            C_t_address0 <= grp_hprod_fu_708_res_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            C_t_address0 <= grp_tanh_fu_550_a_address0;
        else 
            C_t_address0 <= "XXXXXX";
        end if; 
    end process;


    C_t_address1_assign_proc : process(grp_tanh_fu_550_a_address1, grp_hprod_fu_708_res_address1, grp_hprod_fu_708_b_address1, grp_geva_1_fu_715_res_address1, ap_CS_fsm_state43, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            C_t_address1 <= grp_geva_1_fu_715_res_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            C_t_address1 <= grp_hprod_fu_708_b_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            C_t_address1 <= grp_hprod_fu_708_res_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            C_t_address1 <= grp_tanh_fu_550_a_address1;
        else 
            C_t_address1 <= "XXXXXX";
        end if; 
    end process;


    C_t_ce0_assign_proc : process(ap_CS_fsm_state5, grp_tanh_fu_550_a_ce0, grp_hprod_fu_708_res_ce0, grp_hprod_fu_708_b_ce0, grp_geva_1_fu_715_res_ce0, ap_CS_fsm_state43, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            C_t_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            C_t_ce0 <= grp_geva_1_fu_715_res_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            C_t_ce0 <= grp_hprod_fu_708_b_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            C_t_ce0 <= grp_hprod_fu_708_res_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            C_t_ce0 <= grp_tanh_fu_550_a_ce0;
        else 
            C_t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_t_ce1_assign_proc : process(grp_tanh_fu_550_a_ce1, grp_hprod_fu_708_res_ce1, grp_hprod_fu_708_b_ce1, grp_geva_1_fu_715_res_ce1, ap_CS_fsm_state43, ap_CS_fsm_state37, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            C_t_ce1 <= grp_geva_1_fu_715_res_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            C_t_ce1 <= grp_hprod_fu_708_b_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            C_t_ce1 <= grp_hprod_fu_708_res_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            C_t_ce1 <= grp_tanh_fu_550_a_ce1;
        else 
            C_t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    C_t_d0_assign_proc : process(ap_CS_fsm_state5, grp_hprod_fu_708_res_d0, grp_geva_1_fu_715_res_d0, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            C_t_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            C_t_d0 <= grp_geva_1_fu_715_res_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            C_t_d0 <= grp_hprod_fu_708_res_d0;
        else 
            C_t_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_t_d1_assign_proc : process(grp_hprod_fu_708_res_d1, grp_geva_1_fu_715_res_d1, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            C_t_d1 <= grp_geva_1_fu_715_res_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            C_t_d1 <= grp_hprod_fu_708_res_d1;
        else 
            C_t_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_t_we0_assign_proc : process(ap_CS_fsm_state5, grp_hprod_fu_708_res_we0, grp_geva_1_fu_715_res_we0, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            C_t_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            C_t_we0 <= grp_geva_1_fu_715_res_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            C_t_we0 <= grp_hprod_fu_708_res_we0;
        else 
            C_t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_t_we1_assign_proc : process(grp_hprod_fu_708_res_we1, grp_geva_1_fu_715_res_we1, ap_CS_fsm_state39, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            C_t_we1 <= grp_geva_1_fu_715_res_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            C_t_we1 <= grp_hprod_fu_708_res_we1;
        else 
            C_t_we1 <= ap_const_logic_0;
        end if; 
    end process;


    Weight0_c_ce0_assign_proc : process(grp_gemvm_fu_562_a_ce0, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            Weight0_c_ce0 <= grp_gemvm_fu_562_a_ce0;
        else 
            Weight0_c_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Weight0_c_ce1_assign_proc : process(grp_gemvm_fu_562_a_ce1, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            Weight0_c_ce1 <= grp_gemvm_fu_562_a_ce1;
        else 
            Weight0_c_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Weight0_f_ce0_assign_proc : process(grp_gemvm_fu_562_a_ce0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Weight0_f_ce0 <= grp_gemvm_fu_562_a_ce0;
        else 
            Weight0_f_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Weight0_f_ce1_assign_proc : process(grp_gemvm_fu_562_a_ce1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Weight0_f_ce1 <= grp_gemvm_fu_562_a_ce1;
        else 
            Weight0_f_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Weight0_i_ce0_assign_proc : process(grp_gemvm_fu_562_a_ce0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Weight0_i_ce0 <= grp_gemvm_fu_562_a_ce0;
        else 
            Weight0_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Weight0_i_ce1_assign_proc : process(grp_gemvm_fu_562_a_ce1, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Weight0_i_ce1 <= grp_gemvm_fu_562_a_ce1;
        else 
            Weight0_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Weight0_o_ce0_assign_proc : process(grp_gemvm_fu_562_a_ce0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Weight0_o_ce0 <= grp_gemvm_fu_562_a_ce0;
        else 
            Weight0_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Weight0_o_ce1_assign_proc : process(grp_gemvm_fu_562_a_ce1, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Weight0_o_ce1 <= grp_gemvm_fu_562_a_ce1;
        else 
            Weight0_o_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln105_fu_965_p2 <= std_logic_vector(unsigned(i_0_0_i_reg_538) + unsigned(ap_const_lv3_2));
    add_ln136_fu_729_p2 <= std_logic_vector(unsigned(phi_ln136_reg_437) + unsigned(ap_const_lv6_1));
    add_ln137_fu_746_p2 <= std_logic_vector(unsigned(phi_ln137_reg_448) + unsigned(ap_const_lv6_1));
    add_ln138_fu_763_p2 <= std_logic_vector(unsigned(phi_ln138_reg_459) + unsigned(ap_const_lv6_1));
    add_ln139_fu_780_p2 <= std_logic_vector(unsigned(phi_ln139_reg_470) + unsigned(ap_const_lv6_1));
    add_ln140_fu_797_p2 <= std_logic_vector(unsigned(phi_ln140_reg_481) + unsigned(ap_const_lv6_1));
    add_ln141_fu_814_p2 <= std_logic_vector(unsigned(phi_ln141_reg_492) + unsigned(ap_const_lv6_1));
    add_ln174_fu_889_p2 <= std_logic_vector(unsigned(sub_ln174_reg_1027) + unsigned(zext_ln174_4_fu_873_p1));
    add_ln175_fu_925_p2 <= std_logic_vector(unsigned(j1_0_reg_526) + unsigned(ap_const_lv7_1C));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(46);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(47);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state57 <= ap_CS_fsm(48);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter3_state54_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter3_state54 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter3_state54 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_0_i_phi_fu_542_p4_assign_proc : process(i_0_0_i_reg_538, icmp_ln105_reg_1058, ap_CS_fsm_pp0_stage0, icmp_ln105_1_reg_1072, add_ln105_reg_1106, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln105_1_reg_1072 = ap_const_lv1_1) and (icmp_ln105_reg_1058 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_0_i_phi_fu_542_p4 <= add_ln105_reg_1106;
        else 
            ap_phi_mux_i_0_0_i_phi_fu_542_p4 <= i_0_0_i_reg_538;
        end if; 
    end process;


    ap_predicate_tran54to57_state48_assign_proc : process(icmp_ln105_reg_1058, icmp_ln105_1_reg_1072)
    begin
                ap_predicate_tran54to57_state48 <= ((icmp_ln105_1_reg_1072 = ap_const_lv1_0) or (icmp_ln105_reg_1058 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state57)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gate_f_address0_assign_proc : process(ap_CS_fsm_state2, grp_sigmoid_fu_556_res_address0, grp_hprod_fu_708_a_address0, ap_CS_fsm_state17, ap_CS_fsm_state37, zext_ln136_fu_735_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gate_f_address0 <= zext_ln136_fu_735_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            gate_f_address0 <= grp_hprod_fu_708_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            gate_f_address0 <= grp_sigmoid_fu_556_res_address0;
        else 
            gate_f_address0 <= "XXXXXX";
        end if; 
    end process;


    gate_f_ce0_assign_proc : process(ap_CS_fsm_state2, grp_sigmoid_fu_556_res_ce0, grp_hprod_fu_708_a_ce0, ap_CS_fsm_state17, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gate_f_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            gate_f_ce0 <= grp_hprod_fu_708_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            gate_f_ce0 <= grp_sigmoid_fu_556_res_ce0;
        else 
            gate_f_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gate_f_ce1_assign_proc : process(grp_hprod_fu_708_a_ce1, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            gate_f_ce1 <= grp_hprod_fu_708_a_ce1;
        else 
            gate_f_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    gate_f_d0_assign_proc : process(ap_CS_fsm_state2, grp_sigmoid_fu_556_res_d0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gate_f_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            gate_f_d0 <= grp_sigmoid_fu_556_res_d0;
        else 
            gate_f_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gate_f_we0_assign_proc : process(ap_CS_fsm_state2, grp_sigmoid_fu_556_res_we0, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gate_f_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            gate_f_we0 <= grp_sigmoid_fu_556_res_we0;
        else 
            gate_f_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gate_i_address0_assign_proc : process(ap_CS_fsm_state3, grp_sigmoid_fu_556_res_address0, grp_hprod_fu_708_a_address0, ap_CS_fsm_state23, ap_CS_fsm_state39, zext_ln137_fu_752_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gate_i_address0 <= zext_ln137_fu_752_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            gate_i_address0 <= grp_hprod_fu_708_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            gate_i_address0 <= grp_sigmoid_fu_556_res_address0;
        else 
            gate_i_address0 <= "XXXXXX";
        end if; 
    end process;


    gate_i_ce0_assign_proc : process(ap_CS_fsm_state3, grp_sigmoid_fu_556_res_ce0, grp_hprod_fu_708_a_ce0, ap_CS_fsm_state23, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gate_i_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            gate_i_ce0 <= grp_hprod_fu_708_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            gate_i_ce0 <= grp_sigmoid_fu_556_res_ce0;
        else 
            gate_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gate_i_ce1_assign_proc : process(grp_hprod_fu_708_a_ce1, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            gate_i_ce1 <= grp_hprod_fu_708_a_ce1;
        else 
            gate_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    gate_i_d0_assign_proc : process(ap_CS_fsm_state3, grp_sigmoid_fu_556_res_d0, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gate_i_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            gate_i_d0 <= grp_sigmoid_fu_556_res_d0;
        else 
            gate_i_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gate_i_we0_assign_proc : process(ap_CS_fsm_state3, grp_sigmoid_fu_556_res_we0, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gate_i_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            gate_i_we0 <= grp_sigmoid_fu_556_res_we0;
        else 
            gate_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    gate_o_address0_assign_proc : process(ap_CS_fsm_state6, grp_sigmoid_fu_556_res_address0, grp_hprod_fu_708_a_address0, ap_CS_fsm_state45, ap_CS_fsm_state35, zext_ln140_fu_803_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            gate_o_address0 <= zext_ln140_fu_803_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            gate_o_address0 <= grp_hprod_fu_708_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            gate_o_address0 <= grp_sigmoid_fu_556_res_address0;
        else 
            gate_o_address0 <= "XXXXXX";
        end if; 
    end process;


    gate_o_ce0_assign_proc : process(ap_CS_fsm_state6, grp_sigmoid_fu_556_res_ce0, grp_hprod_fu_708_a_ce0, ap_CS_fsm_state45, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            gate_o_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            gate_o_ce0 <= grp_hprod_fu_708_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            gate_o_ce0 <= grp_sigmoid_fu_556_res_ce0;
        else 
            gate_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gate_o_ce1_assign_proc : process(grp_hprod_fu_708_a_ce1, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            gate_o_ce1 <= grp_hprod_fu_708_a_ce1;
        else 
            gate_o_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    gate_o_d0_assign_proc : process(ap_CS_fsm_state6, grp_sigmoid_fu_556_res_d0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            gate_o_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            gate_o_d0 <= grp_sigmoid_fu_556_res_d0;
        else 
            gate_o_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gate_o_we0_assign_proc : process(ap_CS_fsm_state6, grp_sigmoid_fu_556_res_we0, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            gate_o_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            gate_o_we0 <= grp_sigmoid_fu_556_res_we0;
        else 
            gate_o_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_725_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, res_load_reg_1091, res_load_1_reg_1101, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_725_p0 <= res_load_1_reg_1101;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_725_p0 <= res_load_reg_1091;
            else 
                grp_fu_725_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_725_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_725_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, Bias_lc_load_reg_1086, ap_CS_fsm_pp0_stage1, Bias_lc_load_1_reg_1111, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_725_p1 <= Bias_lc_load_1_reg_1111;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_725_p1 <= Bias_lc_load_reg_1086;
            else 
                grp_fu_725_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_725_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_gemvm1_fu_573_ap_start <= grp_gemvm1_fu_573_ap_start_reg;

    grp_gemvm_fu_562_a_q0_assign_proc : process(Weight0_f_q0, Weight0_i_q0, Weight0_c_q0, Weight0_o_q0, ap_CS_fsm_state13, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_gemvm_fu_562_a_q0 <= Weight0_o_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_gemvm_fu_562_a_q0 <= Weight0_c_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_gemvm_fu_562_a_q0 <= Weight0_i_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_gemvm_fu_562_a_q0 <= Weight0_f_q0;
        else 
            grp_gemvm_fu_562_a_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_gemvm_fu_562_a_q1_assign_proc : process(Weight0_f_q1, Weight0_i_q1, Weight0_c_q1, Weight0_o_q1, ap_CS_fsm_state13, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_gemvm_fu_562_a_q1 <= Weight0_o_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_gemvm_fu_562_a_q1 <= Weight0_c_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_gemvm_fu_562_a_q1 <= Weight0_i_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_gemvm_fu_562_a_q1 <= Weight0_f_q1;
        else 
            grp_gemvm_fu_562_a_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_gemvm_fu_562_ap_start <= grp_gemvm_fu_562_ap_start_reg;

    grp_geva_1_fu_715_a_q0_assign_proc : process(Bias0_f_q0, Bias0_i_q0, Bias0_c_q0, Bias0_o_q0, vec_tmp_q0, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_geva_1_fu_715_a_q0 <= vec_tmp_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_geva_1_fu_715_a_q0 <= Bias0_o_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_geva_1_fu_715_a_q0 <= Bias0_c_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_geva_1_fu_715_a_q0 <= Bias0_i_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_geva_1_fu_715_a_q0 <= Bias0_f_q0;
        else 
            grp_geva_1_fu_715_a_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_geva_1_fu_715_a_q1_assign_proc : process(Bias0_f_q1, Bias0_i_q1, Bias0_c_q1, Bias0_o_q1, vec_tmp_q1, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_geva_1_fu_715_a_q1 <= vec_tmp_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_geva_1_fu_715_a_q1 <= Bias0_o_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_geva_1_fu_715_a_q1 <= Bias0_c_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_geva_1_fu_715_a_q1 <= Bias0_i_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_geva_1_fu_715_a_q1 <= Bias0_f_q1;
        else 
            grp_geva_1_fu_715_a_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_geva_1_fu_715_ap_start <= grp_geva_1_fu_715_ap_start_reg;

    grp_geva_1_fu_715_res_q0_assign_proc : process(C_t_q0, vec_tmp_q0, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_geva_1_fu_715_res_q0 <= C_t_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_geva_1_fu_715_res_q0 <= vec_tmp_q0;
        else 
            grp_geva_1_fu_715_res_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_geva_1_fu_715_res_q1_assign_proc : process(C_t_q1, vec_tmp_q1, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_geva_1_fu_715_res_q1 <= C_t_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_geva_1_fu_715_res_q1 <= vec_tmp_q1;
        else 
            grp_geva_1_fu_715_res_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_hprod_fu_708_a_q0_assign_proc : process(gate_f_q0, gate_i_q0, gate_o_q0, ap_CS_fsm_state45, ap_CS_fsm_state37, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_hprod_fu_708_a_q0 <= gate_o_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_hprod_fu_708_a_q0 <= gate_i_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_hprod_fu_708_a_q0 <= gate_f_q0;
        else 
            grp_hprod_fu_708_a_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_hprod_fu_708_a_q1_assign_proc : process(gate_f_q1, gate_i_q1, gate_o_q1, ap_CS_fsm_state45, ap_CS_fsm_state37, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_hprod_fu_708_a_q1 <= gate_o_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_hprod_fu_708_a_q1 <= gate_i_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_hprod_fu_708_a_q1 <= gate_f_q1;
        else 
            grp_hprod_fu_708_a_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_hprod_fu_708_ap_start <= grp_hprod_fu_708_ap_start_reg;

    grp_hprod_fu_708_b_q0_assign_proc : process(stat_C_q0, C_t_q0, vec_tmp_q0, ap_CS_fsm_state45, ap_CS_fsm_state37, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_hprod_fu_708_b_q0 <= vec_tmp_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_hprod_fu_708_b_q0 <= stat_C_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_hprod_fu_708_b_q0 <= C_t_q0;
        else 
            grp_hprod_fu_708_b_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_hprod_fu_708_b_q1_assign_proc : process(stat_C_q1, C_t_q1, vec_tmp_q1, ap_CS_fsm_state45, ap_CS_fsm_state37, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_hprod_fu_708_b_q1 <= vec_tmp_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_hprod_fu_708_b_q1 <= stat_C_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_hprod_fu_708_b_q1 <= C_t_q1;
        else 
            grp_hprod_fu_708_b_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_sigmoid_fu_556_ap_start <= grp_sigmoid_fu_556_ap_start_reg;

    grp_tanh_fu_550_a_q0_assign_proc : process(C_t_q0, vec_tmp_q0, ap_CS_fsm_state29, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_tanh_fu_550_a_q0 <= C_t_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_tanh_fu_550_a_q0 <= vec_tmp_q0;
        else 
            grp_tanh_fu_550_a_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_tanh_fu_550_a_q1_assign_proc : process(C_t_q1, vec_tmp_q1, ap_CS_fsm_state29, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_tanh_fu_550_a_q1 <= C_t_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_tanh_fu_550_a_q1 <= vec_tmp_q1;
        else 
            grp_tanh_fu_550_a_q1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_tanh_fu_550_ap_start <= grp_tanh_fu_550_ap_start_reg;

    h_t_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state46, grp_gemvm1_fu_573_b_address0, grp_hprod_fu_708_res_address0, ap_CS_fsm_state45, zext_ln141_fu_820_p1, zext_ln175_fu_920_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            h_t_address0 <= zext_ln175_fu_920_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            h_t_address0 <= zext_ln141_fu_820_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            h_t_address0 <= grp_hprod_fu_708_res_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            h_t_address0 <= grp_gemvm1_fu_573_b_address0;
        else 
            h_t_address0 <= "XXXXXX";
        end if; 
    end process;


    h_t_address1_assign_proc : process(ap_CS_fsm_state46, grp_gemvm1_fu_573_b_address1, grp_hprod_fu_708_res_address1, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            h_t_address1 <= grp_hprod_fu_708_res_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            h_t_address1 <= grp_gemvm1_fu_573_b_address1;
        else 
            h_t_address1 <= "XXXXXX";
        end if; 
    end process;


    h_t_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state46, grp_gemvm1_fu_573_b_ce0, grp_hprod_fu_708_res_ce0, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            h_t_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            h_t_ce0 <= grp_hprod_fu_708_res_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            h_t_ce0 <= grp_gemvm1_fu_573_b_ce0;
        else 
            h_t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_t_ce1_assign_proc : process(ap_CS_fsm_state46, grp_gemvm1_fu_573_b_ce1, grp_hprod_fu_708_res_ce1, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            h_t_ce1 <= grp_hprod_fu_708_res_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            h_t_ce1 <= grp_gemvm1_fu_573_b_ce1;
        else 
            h_t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    h_t_d0_assign_proc : process(ap_CS_fsm_state7, grp_hprod_fu_708_res_d0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            h_t_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            h_t_d0 <= grp_hprod_fu_708_res_d0;
        else 
            h_t_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    h_t_we0_assign_proc : process(ap_CS_fsm_state7, grp_hprod_fu_708_res_we0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            h_t_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            h_t_we0 <= grp_hprod_fu_708_res_we0;
        else 
            h_t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    h_t_we1_assign_proc : process(grp_hprod_fu_708_res_we1, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            h_t_we1 <= grp_hprod_fu_708_res_we1;
        else 
            h_t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_837_p2 <= std_logic_vector(unsigned(i_0_reg_503) + unsigned(ap_const_lv5_1));
    icmp_ln105_1_fu_954_p2 <= "1" when (unsigned(or_ln105_fu_948_p2) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln105_fu_936_p2 <= "1" when (unsigned(ap_phi_mux_i_0_0_i_phi_fu_542_p4) < unsigned(ap_const_lv3_5)) else "0";
    icmp_ln136_fu_740_p2 <= "1" when (phi_ln136_reg_437 = ap_const_lv6_3F) else "0";
    icmp_ln137_fu_757_p2 <= "1" when (phi_ln137_reg_448 = ap_const_lv6_3F) else "0";
    icmp_ln138_fu_774_p2 <= "1" when (phi_ln138_reg_459 = ap_const_lv6_3F) else "0";
    icmp_ln139_fu_791_p2 <= "1" when (phi_ln139_reg_470 = ap_const_lv6_3F) else "0";
    icmp_ln140_fu_808_p2 <= "1" when (phi_ln140_reg_481 = ap_const_lv6_3F) else "0";
    icmp_ln141_fu_825_p2 <= "1" when (phi_ln141_reg_492 = ap_const_lv6_3F) else "0";
    icmp_ln147_fu_831_p2 <= "1" when (i_0_reg_503 = ap_const_lv5_1C) else "0";
    icmp_ln174_fu_877_p2 <= "1" when (j_0_reg_514 = ap_const_lv5_1C) else "0";
    icmp_ln175_fu_908_p2 <= "1" when (j1_0_reg_526 = ap_const_lv7_40) else "0";
    input_r_address0 <= zext_ln174_fu_898_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_914_p2 <= std_logic_vector(unsigned(j1_0_reg_526) + unsigned(ap_const_lv7_1));
    j_fu_883_p2 <= std_logic_vector(unsigned(j_0_reg_514) + unsigned(ap_const_lv5_1));
    or_ln105_fu_948_p2 <= (ap_phi_mux_i_0_0_i_phi_fu_542_p4 or ap_const_lv3_1);

    res_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, res_addr_reg_1067_pp0_iter3_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_CS_fsm_state46, grp_gemvm1_fu_573_res_address0, ap_block_pp0_stage0, zext_ln109_fu_942_p1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_address0 <= res_addr_reg_1067_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_address0 <= zext_ln109_fu_942_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            res_address0 <= grp_gemvm1_fu_573_res_address0;
        else 
            res_address0 <= "XXX";
        end if; 
    end process;


    res_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln109_1_fu_960_p1, res_addr_2_reg_1081_pp0_iter4_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_address1 <= res_addr_2_reg_1081_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_address1 <= zext_ln109_1_fu_960_p1(3 - 1 downto 0);
        else 
            res_address1 <= "XXX";
        end if; 
    end process;


    res_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3, ap_CS_fsm_state46, grp_gemvm1_fu_573_res_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            res_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            res_ce0 <= grp_gemvm1_fu_573_res_ce0;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            res_ce1 <= ap_const_logic_1;
        else 
            res_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    res_d0_assign_proc : process(ap_CS_fsm_pp0_stage1, tmp9_i_reg_1116, ap_enable_reg_pp0_iter3, ap_CS_fsm_state46, grp_gemvm1_fu_573_res_d0, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            res_d0 <= tmp9_i_reg_1116;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            res_d0 <= grp_gemvm1_fu_573_res_d0;
        else 
            res_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    res_d1 <= tmp_1_i_reg_1121;

    res_we0_assign_proc : process(icmp_ln105_reg_1058_pp0_iter3_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3, ap_CS_fsm_state46, grp_gemvm1_fu_573_res_we0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln105_reg_1058_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            res_we0 <= grp_gemvm1_fu_573_res_we0;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;


    res_we1_assign_proc : process(icmp_ln105_reg_1058_pp0_iter4_reg, icmp_ln105_1_reg_1072_pp0_iter4_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln105_1_reg_1072_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln105_reg_1058_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            res_we1 <= ap_const_logic_1;
        else 
            res_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln174_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln174_fu_889_p2),32));

    shl_ln174_1_fu_855_p3 <= (i_0_reg_503 & ap_const_lv2_0);
    shl_ln_fu_843_p3 <= (i_0_reg_503 & ap_const_lv5_0);

    stat_C_address0_assign_proc : process(ap_CS_fsm_state4, grp_tanh_fu_550_res_address0, grp_hprod_fu_708_b_address0, ap_CS_fsm_state29, ap_CS_fsm_state39, zext_ln138_fu_769_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stat_C_address0 <= zext_ln138_fu_769_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            stat_C_address0 <= grp_hprod_fu_708_b_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            stat_C_address0 <= grp_tanh_fu_550_res_address0;
        else 
            stat_C_address0 <= "XXXXXX";
        end if; 
    end process;


    stat_C_address1_assign_proc : process(grp_tanh_fu_550_res_address1, grp_hprod_fu_708_b_address1, ap_CS_fsm_state29, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            stat_C_address1 <= grp_hprod_fu_708_b_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            stat_C_address1 <= grp_tanh_fu_550_res_address1;
        else 
            stat_C_address1 <= "XXXXXX";
        end if; 
    end process;


    stat_C_ce0_assign_proc : process(ap_CS_fsm_state4, grp_tanh_fu_550_res_ce0, grp_hprod_fu_708_b_ce0, ap_CS_fsm_state29, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stat_C_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            stat_C_ce0 <= grp_hprod_fu_708_b_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            stat_C_ce0 <= grp_tanh_fu_550_res_ce0;
        else 
            stat_C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    stat_C_ce1_assign_proc : process(grp_tanh_fu_550_res_ce1, grp_hprod_fu_708_b_ce1, ap_CS_fsm_state29, ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            stat_C_ce1 <= grp_hprod_fu_708_b_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            stat_C_ce1 <= grp_tanh_fu_550_res_ce1;
        else 
            stat_C_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    stat_C_d0_assign_proc : process(ap_CS_fsm_state4, grp_tanh_fu_550_res_d0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stat_C_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            stat_C_d0 <= grp_tanh_fu_550_res_d0;
        else 
            stat_C_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stat_C_we0_assign_proc : process(ap_CS_fsm_state4, grp_tanh_fu_550_res_we0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stat_C_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            stat_C_we0 <= grp_tanh_fu_550_res_we0;
        else 
            stat_C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    stat_C_we1_assign_proc : process(grp_tanh_fu_550_res_we1, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            stat_C_we1 <= grp_tanh_fu_550_res_we1;
        else 
            stat_C_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln174_fu_867_p2 <= std_logic_vector(unsigned(zext_ln174_2_fu_851_p1) - unsigned(zext_ln174_3_fu_863_p1));

    vec_i_address0_assign_proc : process(grp_gemvm_fu_562_b_address0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, zext_ln174_1_fu_903_p1, zext_ln175_1_fu_931_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vec_i_address0 <= zext_ln175_1_fu_931_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vec_i_address0 <= zext_ln174_1_fu_903_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            vec_i_address0 <= grp_gemvm_fu_562_b_address0;
        else 
            vec_i_address0 <= "XXXXXXX";
        end if; 
    end process;


    vec_i_ce0_assign_proc : process(grp_gemvm_fu_562_b_ce0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            vec_i_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            vec_i_ce0 <= grp_gemvm_fu_562_b_ce0;
        else 
            vec_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vec_i_ce1_assign_proc : process(grp_gemvm_fu_562_b_ce1, ap_CS_fsm_state13, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            vec_i_ce1 <= grp_gemvm_fu_562_b_ce1;
        else 
            vec_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vec_i_d0_assign_proc : process(input_r_q0, h_t_q0, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            vec_i_d0 <= h_t_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            vec_i_d0 <= input_r_q0;
        else 
            vec_i_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vec_i_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            vec_i_we0 <= ap_const_logic_1;
        else 
            vec_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    vec_tmp_address0_assign_proc : process(grp_tanh_fu_550_res_address0, grp_tanh_fu_550_a_address0, grp_sigmoid_fu_556_a_address0, grp_gemvm_fu_562_res_address0, grp_hprod_fu_708_res_address0, grp_hprod_fu_708_b_address0, grp_geva_1_fu_715_res_address0, grp_geva_1_fu_715_a_address0, ap_CS_fsm_state45, ap_CS_fsm_state29, ap_CS_fsm_state43, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state35, ap_CS_fsm_state13, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            vec_tmp_address0 <= grp_geva_1_fu_715_a_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            vec_tmp_address0 <= grp_geva_1_fu_715_res_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            vec_tmp_address0 <= grp_hprod_fu_708_b_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            vec_tmp_address0 <= grp_hprod_fu_708_res_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            vec_tmp_address0 <= grp_gemvm_fu_562_res_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            vec_tmp_address0 <= grp_sigmoid_fu_556_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            vec_tmp_address0 <= grp_tanh_fu_550_a_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            vec_tmp_address0 <= grp_tanh_fu_550_res_address0;
        else 
            vec_tmp_address0 <= "XXXXXX";
        end if; 
    end process;


    vec_tmp_address1_assign_proc : process(grp_tanh_fu_550_res_address1, grp_tanh_fu_550_a_address1, grp_hprod_fu_708_res_address1, grp_hprod_fu_708_b_address1, grp_geva_1_fu_715_res_address1, grp_geva_1_fu_715_a_address1, ap_CS_fsm_state45, ap_CS_fsm_state29, ap_CS_fsm_state43, ap_CS_fsm_state37, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            vec_tmp_address1 <= grp_geva_1_fu_715_a_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            vec_tmp_address1 <= grp_geva_1_fu_715_res_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            vec_tmp_address1 <= grp_hprod_fu_708_b_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            vec_tmp_address1 <= grp_hprod_fu_708_res_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            vec_tmp_address1 <= grp_tanh_fu_550_a_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            vec_tmp_address1 <= grp_tanh_fu_550_res_address1;
        else 
            vec_tmp_address1 <= "XXXXXX";
        end if; 
    end process;


    vec_tmp_ce0_assign_proc : process(grp_tanh_fu_550_res_ce0, grp_tanh_fu_550_a_ce0, grp_sigmoid_fu_556_a_ce0, grp_gemvm_fu_562_res_ce0, grp_hprod_fu_708_res_ce0, grp_hprod_fu_708_b_ce0, grp_geva_1_fu_715_res_ce0, grp_geva_1_fu_715_a_ce0, ap_CS_fsm_state45, ap_CS_fsm_state29, ap_CS_fsm_state43, ap_CS_fsm_state17, ap_CS_fsm_state23, ap_CS_fsm_state35, ap_CS_fsm_state13, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            vec_tmp_ce0 <= grp_geva_1_fu_715_a_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            vec_tmp_ce0 <= grp_geva_1_fu_715_res_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            vec_tmp_ce0 <= grp_hprod_fu_708_b_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            vec_tmp_ce0 <= grp_hprod_fu_708_res_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            vec_tmp_ce0 <= grp_gemvm_fu_562_res_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            vec_tmp_ce0 <= grp_sigmoid_fu_556_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            vec_tmp_ce0 <= grp_tanh_fu_550_a_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            vec_tmp_ce0 <= grp_tanh_fu_550_res_ce0;
        else 
            vec_tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    vec_tmp_ce1_assign_proc : process(grp_tanh_fu_550_res_ce1, grp_tanh_fu_550_a_ce1, grp_hprod_fu_708_res_ce1, grp_hprod_fu_708_b_ce1, grp_geva_1_fu_715_res_ce1, grp_geva_1_fu_715_a_ce1, ap_CS_fsm_state45, ap_CS_fsm_state29, ap_CS_fsm_state43, ap_CS_fsm_state37, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state33, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            vec_tmp_ce1 <= grp_geva_1_fu_715_a_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            vec_tmp_ce1 <= grp_geva_1_fu_715_res_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            vec_tmp_ce1 <= grp_hprod_fu_708_b_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            vec_tmp_ce1 <= grp_hprod_fu_708_res_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            vec_tmp_ce1 <= grp_tanh_fu_550_a_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            vec_tmp_ce1 <= grp_tanh_fu_550_res_ce1;
        else 
            vec_tmp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    vec_tmp_d0_assign_proc : process(grp_tanh_fu_550_res_d0, grp_gemvm_fu_562_res_d0, grp_hprod_fu_708_res_d0, grp_geva_1_fu_715_res_d0, ap_CS_fsm_state43, ap_CS_fsm_state13, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            vec_tmp_d0 <= grp_geva_1_fu_715_res_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            vec_tmp_d0 <= grp_hprod_fu_708_res_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            vec_tmp_d0 <= grp_gemvm_fu_562_res_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            vec_tmp_d0 <= grp_tanh_fu_550_res_d0;
        else 
            vec_tmp_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vec_tmp_d1_assign_proc : process(grp_tanh_fu_550_res_d1, grp_hprod_fu_708_res_d1, grp_geva_1_fu_715_res_d1, ap_CS_fsm_state43, ap_CS_fsm_state37, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            vec_tmp_d1 <= grp_geva_1_fu_715_res_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            vec_tmp_d1 <= grp_hprod_fu_708_res_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            vec_tmp_d1 <= grp_tanh_fu_550_res_d1;
        else 
            vec_tmp_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    vec_tmp_we0_assign_proc : process(grp_tanh_fu_550_res_we0, grp_gemvm_fu_562_res_we0, grp_hprod_fu_708_res_we0, grp_geva_1_fu_715_res_we0, ap_CS_fsm_state43, ap_CS_fsm_state13, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state31, ap_CS_fsm_state37, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            vec_tmp_we0 <= grp_geva_1_fu_715_res_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            vec_tmp_we0 <= grp_hprod_fu_708_res_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            vec_tmp_we0 <= grp_gemvm_fu_562_res_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            vec_tmp_we0 <= grp_tanh_fu_550_res_we0;
        else 
            vec_tmp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    vec_tmp_we1_assign_proc : process(grp_tanh_fu_550_res_we1, grp_hprod_fu_708_res_we1, grp_geva_1_fu_715_res_we1, ap_CS_fsm_state43, ap_CS_fsm_state37, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            vec_tmp_we1 <= grp_geva_1_fu_715_res_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            vec_tmp_we1 <= grp_hprod_fu_708_res_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            vec_tmp_we1 <= grp_tanh_fu_550_res_we1;
        else 
            vec_tmp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln109_1_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln105_fu_948_p2),64));
    zext_ln109_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_0_i_phi_fu_542_p4),64));
    zext_ln136_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln136_reg_437),64));
    zext_ln137_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln137_reg_448),64));
    zext_ln138_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln138_reg_459),64));
    zext_ln139_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln139_reg_470),64));
    zext_ln140_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln140_reg_481),64));
    zext_ln141_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln141_reg_492),64));
    zext_ln174_1_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_514),64));
    zext_ln174_2_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_843_p3),11));
    zext_ln174_3_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln174_1_fu_855_p3),11));
    zext_ln174_4_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_514),11));
    zext_ln174_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln174_fu_894_p1),64));
    zext_ln175_1_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln175_fu_925_p2),64));
    zext_ln175_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_526),64));
end behav;
