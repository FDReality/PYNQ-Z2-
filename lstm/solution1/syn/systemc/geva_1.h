// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _geva_1_HH_
#define _geva_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "LSTM_Top_fadd_32nbkb.h"

namespace ap_rtl {

struct geva_1 : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > res_address0;
    sc_out< sc_logic > res_ce0;
    sc_out< sc_logic > res_we0;
    sc_out< sc_lv<32> > res_d0;
    sc_in< sc_lv<32> > res_q0;
    sc_out< sc_lv<6> > res_address1;
    sc_out< sc_logic > res_ce1;
    sc_out< sc_logic > res_we1;
    sc_out< sc_lv<32> > res_d1;
    sc_in< sc_lv<32> > res_q1;
    sc_out< sc_lv<6> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_in< sc_lv<32> > a_q0;
    sc_out< sc_lv<6> > a_address1;
    sc_out< sc_logic > a_ce1;
    sc_in< sc_lv<32> > a_q1;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    geva_1(sc_module_name name);
    SC_HAS_PROCESS(geva_1);

    ~geva_1();

    sc_trace_file* mVcdFile;

    LSTM_Top_fadd_32nbkb<1,5,32,32,32>* LSTM_Top_fadd_32nbkb_U10;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > i_0_0_reg_86;
    sc_signal< sc_lv<1> > tmp_2_fu_102_p3;
    sc_signal< sc_lv<1> > tmp_2_reg_138;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > tmp_2_reg_138_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_2_reg_138_pp0_iter2_reg;
    sc_signal< sc_lv<1> > tmp_2_reg_138_pp0_iter3_reg;
    sc_signal< sc_lv<1> > tmp_2_reg_138_pp0_iter4_reg;
    sc_signal< sc_lv<6> > res_addr_reg_147;
    sc_signal< sc_lv<6> > res_addr_reg_147_pp0_iter1_reg;
    sc_signal< sc_lv<6> > res_addr_reg_147_pp0_iter2_reg;
    sc_signal< sc_lv<6> > res_addr_reg_147_pp0_iter3_reg;
    sc_signal< sc_lv<6> > res_addr_3_reg_157;
    sc_signal< sc_lv<6> > res_addr_3_reg_157_pp0_iter1_reg;
    sc_signal< sc_lv<6> > res_addr_3_reg_157_pp0_iter2_reg;
    sc_signal< sc_lv<6> > res_addr_3_reg_157_pp0_iter3_reg;
    sc_signal< sc_lv<6> > res_addr_3_reg_157_pp0_iter4_reg;
    sc_signal< sc_lv<32> > a_load_reg_162;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_state7_pp0_stage1_iter2;
    sc_signal< bool > ap_block_state9_pp0_stage1_iter3;
    sc_signal< bool > ap_block_state11_pp0_stage1_iter4;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<32> > res_load_reg_167;
    sc_signal< sc_lv<32> > a_load_1_reg_172;
    sc_signal< sc_lv<32> > res_load_1_reg_177;
    sc_signal< sc_lv<7> > add_ln105_fu_132_p2;
    sc_signal< sc_lv<7> > add_ln105_reg_182;
    sc_signal< sc_lv<32> > grp_fu_98_p2;
    sc_signal< sc_lv<32> > tmp8_reg_187;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<32> > tmp_1_reg_192;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<7> > ap_phi_mux_i_0_0_phi_fu_90_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln109_fu_114_p1;
    sc_signal< sc_lv<64> > zext_ln109_1_fu_126_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<32> > grp_fu_98_p0;
    sc_signal< sc_lv<32> > grp_fu_98_p1;
    sc_signal< sc_lv<6> > trunc_ln105_fu_110_p1;
    sc_signal< sc_lv<6> > or_ln105_fu_120_p2;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state12;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<7> ap_const_lv7_2;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_address1();
    void thread_a_ce0();
    void thread_a_ce1();
    void thread_add_ln105_fu_132_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state10_pp0_stage0_iter4();
    void thread_ap_block_state11_pp0_stage1_iter4();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_block_state6_pp0_stage0_iter2();
    void thread_ap_block_state7_pp0_stage1_iter2();
    void thread_ap_block_state8_pp0_stage0_iter3();
    void thread_ap_block_state9_pp0_stage1_iter3();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_0_phi_fu_90_p4();
    void thread_ap_ready();
    void thread_grp_fu_98_p0();
    void thread_grp_fu_98_p1();
    void thread_or_ln105_fu_120_p2();
    void thread_res_address0();
    void thread_res_address1();
    void thread_res_ce0();
    void thread_res_ce1();
    void thread_res_d0();
    void thread_res_d1();
    void thread_res_we0();
    void thread_res_we1();
    void thread_tmp_2_fu_102_p3();
    void thread_trunc_ln105_fu_110_p1();
    void thread_zext_ln109_1_fu_126_p1();
    void thread_zext_ln109_fu_114_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
